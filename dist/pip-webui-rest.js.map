{"version":3,"sources":["cache/announces_cache.js","cache/data_cache.js","cache/feedbacks_cache.js","cache/guides_cache.js","cache/image_sets_cache.js","cache/session_cache.js","cache/tags_cache.js","cache/tips_cache.js","core/access.js","core/auth_state.js","core/enums.js","core/rest.js","core/session.js","data/announces_data.js","data/data.js","data/data_model.js","data/feedbacks_data.js","data/guides_data.js","data/image_sets_data.js","data/session_data.js","data/settings_data.js","data/tags_data.js","data/tips_data.js","data/users_data.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrvSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrepxltGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-rest.js","sourcesContent":["/**\r\n * @file Announces data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipAnnouncesCache', ['pipAnnouncesData']);\r\n\r\n    thisModule.service('pipAnnouncesCache',\r\n        ['pipEnums', 'pipDataCache', 'pipTagsCache', function (pipEnums, pipDataCache, pipTagsCache) {\r\n\r\n            return {\r\n                readAnnounces: readAnnounces,\r\n                onAnnounceCreate: onAnnounceCreate,\r\n                onAnnounceUpdate: onAnnounceUpdate,\r\n                onAnnounceDelete: onAnnounceDelete                \r\n            };\r\n\r\n            function readAnnounces(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'announces';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            }\r\n            \r\n            function onAnnounceCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'announces', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            }\r\n\r\n            function onAnnounceUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'announces', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            }\r\n\r\n            function onAnnounceDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('announces', params, successCallback);\r\n            }\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Global application data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global _, angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataCache', ['pipDataModel']);\r\n\r\n    thisModule.provider('pipDataCache', function () {\r\n        var\r\n            CACHE_TIMEOUT = 5 * 60000, // 5 mins or make it configurable\r\n            cache = {};\r\n\r\n        this.timeout = timeout;\r\n\r\n        this.$get = ['$q', 'pipDataModel', function ($q, pipDataModel) {\r\n            return {\r\n                timeout: timeout,\r\n\r\n                clear: clear,\r\n                retrieve: retrieve,\r\n                retrieveOrLoad: retrieveOrLoad,\r\n                store: store,\r\n                storePermanent: storePermanent,\r\n                remove: remove,\r\n                removeItem: removeItem,\r\n                removeDecorator: removeDecorator,\r\n\r\n                // OBSOLETE - will be removed\r\n                addDecorator: addDecorator,\r\n                updateDecorator: updateDecorator,\r\n            };\r\n            //-------------\r\n\r\n            // Converts a string value into a numeric hash code\r\n            function hash(data) {\r\n                var filteredData = {};\r\n\r\n                // Filter only the generic parameters that can be relevant to the query\r\n                if (data != null) {\r\n                    filteredData.item = data.item;\r\n                    filteredData.party_id = data.party_id;\r\n                    filteredData.search = data.search;\r\n                    filteredData.paging = data.paging;\r\n                    filteredData.take = data.take;\r\n                    filteredData.skip = data.skip;\r\n                }\r\n\r\n                filteredData = angular.toJson(filteredData);\r\n                var h = 0, i, chr, len;\r\n                if (filteredData == null || filteredData.length === 0) return h;\r\n                for (i = 0, len = filteredData.length; i < len; i++) {\r\n                    chr = filteredData.charCodeAt(i);\r\n                    h = ((h << 5) - h) + chr;\r\n                    h |= 0; // Convert to 32bit integer\r\n                }\r\n                return h;\r\n            };\r\n\r\n            // Generates parameterized key\r\n            function generateKey(name, params) {\r\n                var h = hash(params);\r\n                return name + (h != 0 ? '_' + h : '');\r\n            };\r\n\r\n            // Clear the cache, globally or selectively\r\n            function clear(name) {\r\n                if (name == null) {\r\n                    cache = {};\r\n                } else {\r\n                    for (var key in cache) {\r\n                        if (key == name || key.startsWith(name + '_')) {\r\n                            delete cache[key];\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Try to retrieve collection from the cache\r\n            function retrieve(name, params) {\r\n                if (name == null) throw new Error('name cannot be null');\r\n                if (name == '') throw new Error('name cannot be empty');\r\n\r\n                var key = generateKey(name, params);\r\n                var holder = cache[key];\r\n                if (holder == null) return null;\r\n\r\n                // If expired then cleanup and return null\r\n                if (holder.expire\r\n                    && _.now() - holder.expire > CACHE_TIMEOUT) {\r\n                    delete cache[key];\r\n                    return null;\r\n                }\r\n\r\n                return holder.data;\r\n            };\r\n\r\n            // Store collection into the cache\r\n            function store(name, data, params) {\r\n                if (name == null) throw new Error('name cannot be null');\r\n                if (name == '') throw new Error('name cannot be empty');\r\n\r\n                cache[generateKey(name, params)] = {\r\n                    expire: _.now(),\r\n                    data: data\r\n                };\r\n            };\r\n\r\n            // Store collection into the cache without expiration\r\n            function storePermanent(name, data, params) {\r\n                if (name == null) throw new Error('name cannot be null');\r\n                if (name == '') throw new Error('name cannot be empty');\r\n\r\n                cache[generateKey(name, params)] = {\r\n                    expire: null,\r\n                    data: data\r\n                };\r\n            };\r\n\r\n            // Remove collection from the cache\r\n            function remove(name, params) {\r\n                if (name == null) throw new Error('name cannot be null');\r\n                if (name == '') throw new Error('name cannot be empty');\r\n\r\n                delete cache[generateKey(name, params)];\r\n            };\r\n\r\n            function updateItem(name, item, params) {\r\n                if (name == null) throw new Error('name cannot be null');\r\n                if (item == null) return;\r\n\r\n                var data = retrieve(name, params);\r\n\r\n                if (data != null) {\r\n                    var isAdded = false;\r\n                    for (var i = 0; i < data.length; i++) {\r\n                        if (data[i].id == item.id) {\r\n                            data[i] = item;\r\n                            isAdded = true;\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (!isAdded) data.push(item);\r\n                    store(name, data, params);\r\n                }\r\n            };\r\n\r\n            // Tries to retrieve collection from the cache, otherwise load it from server\r\n            function retrieveOrLoad(params, successCallback, errorCallback) {\r\n                if (params == null) throw new Error('params cannot be null');\r\n                // todo add check params?\r\n\r\n                var name = (params.cache || params.resource);\r\n\r\n                // Retrieve data from cache\r\n                var filter = params.filter,\r\n                    force = !!params.force,\r\n                    result = !force ? retrieve(name, params) : null,\r\n                    deferred = $q.defer();\r\n\r\n                // Return result if it exists\r\n                if (result) {\r\n                    if (filter) {\r\n                        if (result.data) {\r\n                            result.data = filter(result.data);\r\n                        } else {\r\n                            result = filter(result);\r\n                        }\r\n                    }\r\n                    if (successCallback) successCallback(result);\r\n                    deferred.resolve(result);\r\n                    return deferred.promise;\r\n                }\r\n\r\n                // Load data from server\r\n                if (params.item.paging == 1) {\r\n                    pipDataModel['page'](\r\n                        params,\r\n                        function (data) {\r\n                            // Store data in cache and return\r\n                            store(name, data, params);\r\n                            if (filter) data.data = filter(data.data);\r\n                            deferred.resolve(data);\r\n\r\n                            if (successCallback) successCallback(data);\r\n                        },\r\n                        function (err) {\r\n                            // Return error\r\n                            deferred.reject(err);\r\n                            if (errorCallback) errorCallback(err);\r\n                        }\r\n                    );\r\n                } else {\r\n                    pipDataModel[params.singleResult ? 'readOne' : 'read'](\r\n                        params,\r\n                        function (data) {\r\n                            // Store data in cache and return\r\n                            params.singleResult ?\r\n                                updateItem(name, data, params) :\r\n                                store(name, data, params);\r\n                            if (filter) data = filter(data);\r\n                            deferred.resolve(data);\r\n\r\n                            if (successCallback) successCallback(data);\r\n                        },\r\n                        function (err) {\r\n                            // Return error\r\n                            deferred.reject(err);\r\n                            if (errorCallback) errorCallback(err);\r\n                        }\r\n                    );\r\n                }\r\n\r\n                // Return deferred object\r\n                return deferred.promise;\r\n            };\r\n\r\n            function removeItem(name, item) {\r\n                if (name == null) throw new Error('name cannot be null');\r\n                if (item == null) return;\r\n\r\n                for (var key in cache) {\r\n                    if (key == name || key.startsWith(name + '_')) {\r\n                        var data = cache[key].data;\r\n                        if (angular.isArray(data)) {\r\n                            for (var i = 0; i < data.length; i++) {\r\n                                if (data[i].id == item.id) {\r\n                                    data.splice(i, 1);\r\n                                    i--;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            function removeDecorator(resource, params, successCallback) {\r\n                return function (item) {\r\n                    removeItem(resource, params);\r\n                    if (successCallback) successCallback(item);\r\n                };\r\n            };\r\n\r\n            function updateDecorator(resource, params, successCallback) {\r\n                return function (item) {\r\n                    for (var key in cache) {\r\n                        if (key == resource || key.startsWith(resource + '_')) {\r\n                            var data = cache[key].data;\r\n                            if (angular.isArray(data)) {\r\n                                for (var i = 0; i < data.length; i++) {\r\n                                    if (data[i].id == item.id) {\r\n                                        data[i] = item;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (successCallback) successCallback(item);\r\n                };\r\n            };\r\n\r\n            // OBSOLETE - WILL BE REMOVED ONCE CODE IS REFACTORED\r\n            function addDecorator(resource, params, successCallback) {\r\n                return function (item) {\r\n                    if (!params || !params.notClearedCache) clear(resource);\r\n                    if (successCallback) successCallback(item);\r\n                };\r\n            };\r\n\r\n        }];\r\n        //-----------------------\r\n\r\n        function timeout(newTimeout) {\r\n            if (newTimeout) {\r\n                CACHE_TIMEOUT = newTimeout;\r\n            }\r\n            return CACHE_TIMEOUT;\r\n        };\r\n    });\r\n})();\r\n\r\n","/**\r\n * @file Feedbacks data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipFeedbacksCache', ['pipFeedbacksData']);\r\n\r\n    thisModule.service('pipFeedbacksCache',\r\n        ['pipEnums', 'pipDataCache', 'pipTagsCache', function (pipEnums, pipDataCache, pipTagsCache) {\r\n\r\n            return {\r\n                readFeedbacks: readFeedbacks,\r\n                onFeedbackCreate: onFeedbackCreate,\r\n                onFeedbackUpdate: onFeedbackUpdate,\r\n                onFeedbackDelete: onFeedbackDelete                \r\n            };\r\n\r\n            function readFeedbacks(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'feedback';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function onFeedbackCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'feedback', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onFeedbackUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'feedback', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onFeedbackDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('feedback', params, successCallback);\r\n            };\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Guides data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipGuidesCache', ['pipGuidesData']);\r\n\r\n    thisModule.service('pipGuidesCache',\r\n        ['pipEnums', 'pipDataCache', 'pipTagsCache', function (pipEnums, pipDataCache, pipTagsCache) {\r\n\r\n            return {\r\n                readGuides: readGuides,\r\n                onGuideCreate: onGuideCreate,\r\n                onGuideUpdate: onGuideUpdate,\r\n                onGuideDelete: onGuideDelete                \r\n            };\r\n\r\n            function readGuides(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'guides';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function onGuideCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'guides', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onGuideUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'guides', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onGuideDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('guides', params, successCallback);\r\n            };\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file ImageSets data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipImageSetsCache', ['pipImageSetsData']);\r\n\r\n    thisModule.service('pipImageSetsCache',\r\n        ['pipEnums', 'pipDataCache', 'pipTagsCache', function (pipEnums, pipDataCache, pipTagsCache) {\r\n\r\n            return {\r\n                readImageSets: readImageSets,\r\n                onImageSetCreate: onImageSetCreate,\r\n                onImageSetUpdate: onImageSetUpdate,\r\n                onImageSetDelete: onImageSetDelete                \r\n            };\r\n\r\n            function readImageSets(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'image_sets';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function onImageSetCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'image_sets', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onImageSetUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'image_sets', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onImageSetDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('image_sets', params, successCallback);\r\n            };\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Session data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipSessionCache', ['pipCore', 'pipRest', 'pipDataCache']);\r\n\r\n    thisModule.run(['$rootScope', 'pipSessionCache', function ($rootScope, pipSessionCache) {\r\n        $rootScope.$on('pipSessionOpened', pipSessionCache.init);\r\n        $rootScope.$on('pipSessionClosed', pipSessionCache.clear);\r\n    }]);\r\n\r\n    thisModule.service('pipSessionCache',\r\n        ['$rootScope', '$stateParams', '$q', 'pipTranslate', 'pipRest', 'localStorageService', 'pipAccess', 'pipEnums', 'pipSession', 'pipDataCache', function ($rootScope, $stateParams, $q, pipTranslate, pipRest, localStorageService,\r\n                  pipAccess, pipEnums, pipSession, pipDataCache) {\r\n\r\n            return {\r\n                init: init,\r\n                clear: clear,\r\n\r\n                readUser: readUser,\r\n                readParty: readParty,\r\n                readConnection: readConnection,\r\n\r\n                readSettings: readSettings,\r\n                onSettingsUpdate: onSettingsUpdate,\r\n\r\n                readSessions: readSessions\r\n            };\r\n            //-------------\r\n\r\n            function readSessions(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function init(event, data) {\r\n                if (data == null)\r\n                    throw new Error('Unexpected error: issues in openning session');\r\n\r\n                clear();\r\n                if (data.serverUrl) $rootScope.$serverUrl = data.serverUrl;\r\n                storeUser(data.user, null);\r\n            };\r\n\r\n            function clear() {\r\n                // Clear data cache\r\n                pipDataCache.clear();\r\n\r\n                // Clear global variables\r\n                delete $rootScope.$user;\r\n                delete $rootScope.$party;\r\n                delete $rootScope.$serverUrl;\r\n                delete $rootScope.$connection;\r\n                delete $rootScope.$settings;\r\n            };\r\n\r\n            function updateUserRights(user, party) {\r\n                // Get parameters from cache if they are not defined\r\n                user = user || pipDataCache.retrieve('user');\r\n                party = party || pipDataCache.retrieve('party');\r\n\r\n                // Exit if user is not defined\r\n                if (user == null) return;\r\n\r\n                // Update user access rights\r\n                if (party == null)\r\n                    user = pipAccess.asOwner(user);\r\n                else if (user.id == party.id)\r\n                    user = pipAccess.asOwner(user);\r\n                else\r\n                    user = pipAccess.toParty(user, party);\r\n\r\n                // Save user with new rights back to cache\r\n                pipDataCache.storePermanent('user', user);\r\n                $rootScope.$user = user;\r\n            };\r\n\r\n            function storeUserTheme(user) {\r\n                if (!user) return;\r\n                var userTheme = user.theme || 'blue';\r\n\r\n                if (user && $rootScope.$party) {\r\n                    if ($rootScope.$party.id == user.id) userTheme = user.theme;\r\n                    else userTheme = 'navy';\r\n                }\r\n\r\n                $rootScope.$theme = userTheme;\r\n                localStorageService.set('theme', userTheme);\r\n            };\r\n\r\n            function storeUser(user) {\r\n                if (user == null) return;\r\n\r\n                pipDataCache.storePermanent('user', user);\r\n                $rootScope.$user = user;\r\n                storeUserTheme(user);\r\n\r\n                // Activate user language\r\n                pipTranslate.use(user.language, false, true);\r\n                updateUserRights(user, null);\r\n            };\r\n\r\n            function readUser(successCallback, errorCallback) {\r\n                // Avoid broken session\r\n                if (!pipSession.opened())\r\n                    throw new Error('User is not authenticated.');\r\n\r\n                var\r\n                    userId = pipSession.userId(),\r\n                    user = pipDataCache.retrieve('user');\r\n\r\n                // Return user from cache\r\n                if (user) {\r\n                    if (user.id != userId)\r\n                        throw new Error('Unexpected error: issues in opening session');\r\n\r\n                    if (successCallback) successCallback(user);\r\n                    var deferred = $q.defer();\r\n                    deferred.resolve(user);\r\n                    return deferred.promise;\r\n                }\r\n\r\n                // Read user from server\r\n                return pipRest.users().get(\r\n                    {id: userId},\r\n                    function (user) {\r\n                        // Double check\r\n                        if (user.id != userId)\r\n                            user == null;\r\n\r\n                        storeUser(user);\r\n\r\n                        if (successCallback) successCallback(use);\r\n                    },\r\n                    errorCallback\r\n                ).$promise;\r\n            };\r\n\r\n            function readParty(stateParams, successCallback, errorCallback) {\r\n                // Avoid broken session\r\n                if (!pipSession.opened())\r\n                    throw new Error('User is not authenticated.');\r\n\r\n                var\r\n                    userId = pipSession.userId(),\r\n                    partyId = stateParams.party_id || userId,\r\n                    party = pipDataCache.retrieve('party');\r\n\r\n                // Skip if party already retrieved\r\n                if (party && party.id == partyId) {\r\n                    $rootScope.$party = party;\r\n\r\n                    storeUserTheme($rootScope.$user);\r\n\r\n                    if (successCallback) successCallback(party);\r\n                    var deferred = $q.defer();\r\n                    deferred.resolve(party);\r\n                    return deferred.promise;\r\n                }\r\n\r\n                // Read party from server\r\n                return pipRest.parties().get(\r\n                    {id: partyId},\r\n                    function (party) {\r\n                        updateUserRights(null, party);\r\n                        pipDataCache.storePermanent('party', party);\r\n                        $rootScope.$party = party;\r\n\r\n                        storeUserTheme($rootScope.$user);\r\n\r\n                        if (successCallback) successCallback(party);\r\n                    },\r\n                    errorCallback\r\n                ).$promise;\r\n            };\r\n\r\n            function readConnection(stateParams, successCallback, errorCallback) {\r\n                // Avoid broken session\r\n                if (!pipSession.opened())\r\n                    throw new Error('User is not authenticated.');\r\n\r\n                var\r\n                    userId = pipSession.userId(),\r\n                    partyId = stateParams.party_id || userId,\r\n                    connection = pipDataCache.retrieve('connection');\r\n\r\n                // Clear connection it does not match user or party\r\n                if (connection\r\n                    && (connection.party_id != userId\r\n                    || connection.to_party_id != partyId)) {\r\n                    connection = null;\r\n                    pipDataCache.remove('connection');\r\n                    delete $rootScope.$connection;\r\n                }\r\n\r\n                // For owner connection is not defined\r\n                if (userId == partyId) {\r\n                    if (successCallback) successCallback(connection);\r\n                    var deferred = $q.defer();\r\n                    deferred.resolve(connection);\r\n                    return deferred.promise;\r\n                }\r\n\r\n                // Read connection from server\r\n                return pipRest.connections().query(\r\n                    {\r\n                        party_id: userId,\r\n                        to_party_id: partyId,\r\n                        accept: pipEnums.ACCEPTANCE.ACCEPTED\r\n                    },\r\n                    function (connections) {\r\n                        // There are shall not be more than one active connection\r\n                        if (connections && connections.length > 0)\r\n                            connection = connections[0];\r\n                        else connection = null;\r\n\r\n                        pipDataCache.storePermanent('connection', connection);\r\n                        $rootScope.$connection = connection;\r\n\r\n                        if (successCallback) successCallback(connection);\r\n                    },\r\n                    errorCallback\r\n                ).$promise;\r\n            };\r\n\r\n            function readSettings(successCallback, errorCallback) {\r\n                // Avoid broken session\r\n                if (!pipSession.opened())\r\n                    throw new Error('User is not authenticated.');\r\n                var\r\n                    userId = pipSession.userId(),\r\n                    settings = pipDataCache.retrieve('settings' + '_' + userId);\r\n\r\n                if (settings) {\r\n                    if (successCallback) successCallback(settings);\r\n                    var deferred = $q.defer();\r\n                    deferred.resolve(settings);\r\n                    return deferred.promise;\r\n                }\r\n\r\n                // Read settings from server\r\n                return pipRest.partySettings().get(\r\n                    {\r\n                        party_id: userId\r\n                    },\r\n                    function (settings) {\r\n                        settings = settings || {};\r\n                        pipDataCache.storePermanent('settings' + '_' + userId, settings);\r\n                        $rootScope.$settings = settings;\r\n\r\n                        if (successCallback) successCallback(settings);\r\n                    },\r\n                    errorCallback\r\n                ).$promise;\r\n            };\r\n\r\n            function onSettingsUpdate(item, successCallback) {\r\n                // return function(item) {\r\n                if (item == null) return;\r\n\r\n                var userId = pipSession.userId(),\r\n                    settings = pipDataCache.retrieve('settings' + '_' + userId);\r\n\r\n                // If tags are stored\r\n                if (settings) {\r\n                    settings = _.extend(settings, item);\r\n                    pipDataCache.storePermanent('settings' + '_' + userId, settings);\r\n                    $rootScope.$settings = settings;\r\n                }\r\n\r\n                if (successCallback) successCallback(item);\r\n            };\r\n        }]\r\n    );\r\n\r\n})();","/**\r\n * @file Tags data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipTagsCache', ['pipUtils', 'pipDataCache']);\r\n\r\n    thisModule.service('pipTagsCache',\r\n        ['pipTags', 'pipDataCache', function(pipTags, pipDataCache) {\r\n            return {\r\n                readTags: readTags,\r\n                // Todo: Add updateTags method\r\n                onTagsUpdate: onTagsUpdate,\r\n                tagsUpdateDecorator: tagsUpdateDecorator\r\n            };\r\n\t\t\t//------------------------------\r\n\r\n            function tagsUpdate(params, item) {\r\n                // Extract tag from updated entity\r\n                var tags = item ? pipTags.extractTags(item) : [];\r\n                if (tags.length == 0) return;\r\n\r\n                var cacheName = 'partyTags';\r\n                if (params && params.party_id !== null && params.party_id !== undefined)\r\n                    cacheName = cacheName + '_' + params.party_id;\r\n                else if (params && params.item && params.item.party_id !== null && params.item.party_id !== undefined)\r\n                    cacheName = cacheName + '_' + params.item.party_id;\r\n\r\n                // Todo: this is a wrong way to get party_id (contributor) from entities\r\n                var data = pipDataCache.retrieve(cacheName);\r\n\r\n                // If tags are stored\r\n                if (data) {\r\n                    _.each(tags, function(tag) {\r\n                        // Find if tag already exists\r\n                        var t = _.find(data.tags, function(t) {\r\n                            return pipTags.equalTags(t.tag, tag);\r\n                        });\r\n\r\n                        // Otherwise add a new tag\r\n                        if (t) {\r\n                            t.tag = tag;\r\n                            t.count = t.count + 1;\r\n                            t.used = new Date();\r\n                        } else {\r\n                            if (!data.tags)\r\n                                data.tags = [];\r\n\t\t\t\t\t\t\t\t\r\n                            data.tags.push({\r\n                                tag: tag,\r\n                                count: 1,\r\n                                used: new Date()\r\n                            });\r\n                        }\r\n                    });\r\n                    pipDataCache.store(cacheName, data);\r\n                }\r\n            };\r\n\r\n            function tagsUpdateDecorator(params, successCallback) {\r\n                return function(item) {\r\n                    tagsUpdate(params, item);\r\n\r\n                    if (successCallback) successCallback(item);\r\n                };\r\n            };\r\n\r\n\t\t\tfunction readTags(params, successCallback, errorCallback) {\r\n\t\t\t\tparams.resource = 'partyTags';\r\n\t\t\t\tparams.singleResult = true;\r\n\r\n\t\t\t\treturn pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n\t\t\t};\r\n\r\n\t\t\t// Todo: Add updateTags method\r\n\r\n\t\t\tfunction onTagsUpdate(params, successCallback) {\r\n\t\t\t\treturn tagsUpdateDecorator(params, successCallback);\r\n\t\t\t};\r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file Tips data cache\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipTipsCache', ['pipTipsData']);\r\n\r\n    thisModule.service('pipTipsCache',\r\n        ['pipEnums', 'pipDataCache', 'pipTagsCache', function (pipEnums, pipDataCache, pipTagsCache) {\r\n\r\n            return {\r\n                readTips: readTips,\r\n                onTipCreate: onTipCreate,\r\n                onTipUpdate: onTipUpdate,\r\n                onTipDelete: onTipDelete                \r\n            };\r\n\r\n            function readTips(params, successCallback, errorCallback) {\r\n                params = params || {};\r\n                params.resource = 'tips';\r\n                params.item = params.item || {};\r\n\r\n                return pipDataCache.retrieveOrLoad(params, successCallback, errorCallback);\r\n            };\r\n            \r\n            function onTipCreate(params, successCallback) {\r\n                return pipDataCache.addDecorator(\r\n                    'tips', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onTipUpdate(params, successCallback) {\r\n                return pipDataCache.updateDecorator(\r\n                    'tips', params,\r\n                    pipTagsCache.tagsUpdateDecorator(params, successCallback)\r\n                );\r\n            };\r\n\r\n            function onTipDelete(params, successCallback) {\r\n                return pipDataCache.removeDecorator('tips', params, successCallback);\r\n            };\r\n                        \r\n        }]\r\n    );\r\n\r\n})();\r\n\r\n","/**\r\n * @file User access permissions service\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global _, angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipRest.Access', ['pipUtils', 'pipRest.Enums']);\r\n\r\n    thisModule.factory('pipAccess', ['pipUtils', 'pipEnums', function (pipUtils, pipEnums) {\r\n\r\n        function defaultAccess(account) {\r\n            // Clone and set default values\r\n            var user = _.defaults(\r\n                {\r\n                    // Fix id\r\n                    id: account.id || account._id,\r\n                    party_id: null,\r\n                    party_name: null,\r\n                    type: null,\r\n                    owner: false,\r\n                    manager: false,\r\n                    contributor: false,\r\n                    share_level: pipEnums.SHARE_LEVEL.WORLD\r\n                },\r\n                account\r\n            );\r\n    \r\n            delete user._id;\r\n    \r\n            return user;\r\n        };\r\n    \r\n        function fixAccess(user) {\r\n            // Owner acts as his own manager\r\n            user.manager = user.manager || user.owner;\r\n    \r\n            // Manager has contributor rights\r\n            user.contributor = user.contributor || user.manager;\r\n    \r\n            // Managers and contributors can access at private level\r\n            if (user.contributor)\r\n                user.share_level = pipEnums.SHARE_LEVEL.PRIVATE;\r\n    \r\n            return user;\r\n        }\r\n    \r\n        function overrideAccess(user, access) {\r\n            // Copy over override\r\n            user.party_id = access.party_id;\r\n            user.party_name = access.party_name;\r\n            user.type = access.type;\r\n            user.owner = !!access.owner;\r\n            user.manager = !!access.manager;\r\n            user.contributor = !!access.contributor;\r\n            user.share_level = access.share_level || pipEnums.SHARE_LEVEL.WORLD;\r\n    \r\n            // Party can be set as an object\r\n            if (access.party) {\r\n                user.party_id = access.party.id || access.party._id;\r\n                user.party_name = access.party.name;\r\n            }\r\n    \r\n            // Make access settings consistent and return\r\n            return fixAccess(user);\r\n        };\r\n    \r\n        function asOwner(account) {\r\n            // Skip if no account set\r\n            if (account == null) return undefined;\r\n    \r\n            // Construct default user\r\n            var user = defaultAccess(account);\r\n    \r\n            // Set owner access rights\r\n            user.party_id = user.id;\r\n            user.party_name = user.name;\r\n            user.type = null;\r\n            user.owner = true;\r\n            user.manager = true;\r\n            user.contributor = true;\r\n            user.share_level = pipEnums.SHARE_LEVEL.PRIVATE;\r\n    \r\n            return user;\r\n        };\r\n    \r\n        function toParty(account, party) {\r\n            // Skip if no account set\r\n            if (account == null) return undefined;\r\n    \r\n            // If no party set then assume owner access\r\n            if (party == null) return asOwner(account);\r\n    \r\n            var \r\n                userId = account.id || account._id,\r\n                partyId = party.id || party._id || party,\r\n                partyName = party.name || account.name;\r\n    \r\n            // If user and party are the same then\r\n            if (userId == partyId) return asOwner(account);\r\n    \r\n            // Set default values\r\n            var user = defaultAccess(account);\r\n            user.party_id = partyId;\r\n            user.party_name = partyName;\r\n    \r\n            // Identify maximum access level\r\n            _.each(user.party_access, function (access) {\r\n                if (pipUtils.equalObjectIds(partyId, access.party_id)) {\r\n                    user.party_name = access.party_name;\r\n                    user.type = access.type;\r\n                    user.manager = user.manager || access.manager;\r\n                    user.contributor = user.contributor || access.contributor;\r\n                    user.share_level = Math.max(user.share_level, access.share_level);\r\n                }\r\n            });\r\n    \r\n            // Make access settings consistent and return\r\n            return fixAccess(user);\r\n        };\r\n    \r\n        // Can be used for testing\r\n        function override(account, access) {\r\n            // Skip if no account set\r\n            if (account == null) return undefined;\r\n    \r\n            // Set default values\r\n            var user = defaultAccess(account);\r\n    \r\n            // If no override return plain user\r\n            if (access) overrideAccess(user, access);\r\n    \r\n            return user;\r\n        };\r\n    \r\n        // Can be used for testing\r\n        function toPartyWithOverride(account, party, access) {\r\n            var user = toParty(account, party);\r\n    \r\n            // If no override return plain user\r\n            if (access) overrideAccess(user, access);\r\n    \r\n            return user;\r\n        };\r\n        \r\n        return {\r\n            asOwner: asOwner,\r\n            toParty: toParty,\r\n            override: override,\r\n            toPartyWithOverride: toPartyWithOverride\r\n        };\r\n    }]);\r\n\r\n})();\r\n","/**\r\n * @file Application secure router\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global angular */\r\n \r\n(function () {\r\n    'use strict';\r\n    \r\n    var thisModule = angular.module('pipRest.State', ['pipState', 'pipRest.Session', 'pipRest.Access', 'pipSessionCache']);\r\n\r\n    thisModule.config(\r\n        ['$locationProvider', '$httpProvider', function($locationProvider, $httpProvider) {\r\n            // Attach interceptor to react on unauthorized errors\r\n            $httpProvider.interceptors.push('pipAuthHttpResponseInterceptor');\r\n        }]\r\n    );\r\n\r\n    thisModule.run(\r\n        ['$rootScope', 'pipState', 'pipSession', 'pipAuthState', function($rootScope, pipState, pipSession, pipAuthState) {\r\n\r\n            // Intercept routes\r\n            $rootScope.$on('$stateChangeStart', stateChangeStart);\r\n            // Process unauthorized access error\r\n            $rootScope.$on('pipUnauthorizedRedirect', unauthorizedRedirect);\r\n            // Handle other errors\r\n            $rootScope.$on('pipMaintenanceError', maintenanceError);\r\n            $rootScope.$on('pipNoConnectionError', noConnectionError);\r\n            $rootScope.$on('pipMissingRouteError', missingRouteError);\r\n            $rootScope.$on('pipUnknownError', unknownError);\r\n\r\n            function stateChangeStart(event, toState, toParams, fromState, fromParams) {\r\n                // Implement redirect mechanism\r\n                if (pipAuthState.redirect(event, toState, toParams, $rootScope)) {\r\n                    return;\r\n                }\r\n\r\n                // todo apply in all tool\r\n                // If user is not authorized then switch to signin\r\n                if ((toState.auth  || toState.auth === undefined) && !pipSession.opened()) {\r\n                    event.preventDefault();\r\n\r\n                    var redirectTo = pipState.href(toState.name, toParams);\r\n\r\n                    // Remove hashtag\r\n                    if (redirectTo.length > 0 && redirectTo[0] == '#') {\r\n                        redirectTo = redirectTo.substring(1);\r\n                    }\r\n\r\n                    pipAuthState.goToSignin({ redirect_to: redirectTo, toState: toState, toParams: toParams});\r\n\r\n                    return;\r\n                }\r\n\r\n                // Signout and move to unauthorized page\r\n                if (toState.name == pipAuthState.signoutState()) {\r\n                    event.preventDefault();\r\n                    pipSession.signout();\r\n                    pipAuthState.goToUnauthorized({});\r\n                    return;\r\n                }\r\n\r\n                // Move user to authorized page\r\n                if (toState.name == pipAuthState.unauthorizedState()\r\n                    && pipSession.opened()) {\r\n\r\n                    event.preventDefault();\r\n                    pipAuthState.goToAuthorized({});\r\n                    return;\r\n                }\r\n            }\r\n\r\n            function unauthorizedRedirect(event, params) {\r\n                pipSession.close();\r\n                pipAuthState.goToSignin(params);\r\n            }\r\n\r\n            function maintenanceError(event, params) {\r\n                pipAuthState.goToErrors('errors_maintenance', params);\r\n            }\r\n\r\n            function noConnectionError(event, params) {\r\n                pipAuthState.goToErrors('errors_no_connection', params);\r\n            }\r\n\r\n            function missingRouteError(event, params) {\r\n                pipAuthState.goToErrors('errors_missing_route', params);\r\n            }\r\n\r\n            function unknownError(event, params) {\r\n                pipAuthState.goToErrors('errors_unknown', params);\r\n            }\r\n\r\n        }]\r\n    );\r\n\r\n    thisModule.factory('pipAuthHttpResponseInterceptor',\r\n        ['$q', '$location', '$rootScope', function ($q, $location, $rootScope) {\r\n            return {\r\n                response: function (response) {\r\n                    // When server sends Non-authenticated response\r\n                    if (response.status === 401) {\r\n                        console.error(\"Response 401\");\r\n                    }                    \r\n                    return response || $q.when(response);\r\n                },\r\n                \r\n                responseError: function (rejection) {\r\n\r\n\r\n                    var toState = $rootScope.$state && $rootScope.$state.name ? $rootScope.$state.name : null,\r\n                        toParams = $rootScope.$state && $rootScope.$state.params ? $rootScope.$state.params : null;\r\n                    // When server sends Non-authenticated response\r\n                    switch (rejection.status) {\r\n                        case 401:\r\n                        case 440:\r\n                            console.error(\"Response Error 401\", rejection);\r\n                            // Redirect to unauthorized state\r\n                            $rootScope.$emit('pipUnauthorizedRedirect', {\r\n                                redirect_to:  toState && toParams && toParams.redirect_to ? '': $location.url(),\r\n                                toState: toState,\r\n                                toParams: toParams\r\n                            });\r\n\r\n                            break;\r\n                        case 503:\r\n                             //available (maintenance)\r\n                            $rootScope.$emit('pipMaintenanceError', {\r\n                                error: rejection\r\n                            });\r\n\r\n                            console.error(\"errors_maintenance\", rejection);\r\n                            break;\r\n                        case -1:\r\n                        \r\n                            if (!$rootScope.$user || !$rootScope.$party)\r\n                                $rootScope.$emit('pipNoConnectionError', {\r\n                                error: rejection\r\n                                });\r\n\r\n                            console.error(\"errors_no_connection\", rejection);\r\n                            break;\r\n                        default:\r\n                            // unhandled error (internal)\r\n                            //var code = rejection.code || (rejection.data || {}).code || null;\r\n                            //\r\n                            //// if not our server error generate errorEvent\r\n                            //if (!code) {\r\n                            //    $rootScope.$emit('pipUnknownError', {\r\n                            //        error: rejection\r\n                            //    });\r\n                            //}\r\n\r\n                            console.error(\"errors_unknown\", rejection);\r\n                            break;\r\n                    }\r\n\r\n                    return $q.reject(rejection);\r\n                }\r\n            }\r\n        }]\r\n    );\r\n\r\n    thisModule.provider('pipAuthState', ['pipStateProvider', function(pipStateProvider) {\r\n        // Configuration of redirected states\r\n        userResolver.$inject = ['pipSessionCache'];\r\n        partyResolver.$inject = ['pipSessionCache', '$stateParams'];\r\n        connectionResolver.$inject = ['pipSessionCache', '$stateParams'];\r\n        settingsResolver.$inject = ['pipSessionCache'];\r\n        var \r\n            signinState = null,\r\n            signoutState = null,\r\n            authorizedState = '/',\r\n            unauthorizedState = '/';\r\n\r\n        this.signinState = setSigninState;\r\n        this.signoutState = setSignoutState;\r\n        this.authorizedState = setAuthorizedState;\r\n        this.unauthorizedState = setUnauthorizedState;\r\n\r\n        this.redirect = pipStateProvider.redirect;\r\n        this.state = stateOverride;\r\n\r\n        this.$get = ['pipState', function (pipState) {            \r\n            pipState.signinState = function() { return signinState; };\r\n            pipState.signoutState = function() { return signoutState; };\r\n            pipState.authorizedState = function() { return authorizedState; };            \r\n            pipState.unauthorizedState = function() { return unauthorizedState; };\r\n            \r\n            pipState.goToErrors = function(toState, params) {\r\n                if (toState == null)\r\n                    throw new Error('Error state was not defined');\r\n\r\n                pipState.go(toState, params);\r\n            };\r\n\r\n            pipState.goToSignin = function(params) {\r\n                if (signinState == null)\r\n                    throw new Error('Signin state was not defined');\r\n\r\n                pipState.go(signinState, params);\r\n            };\r\n\r\n            pipState.goToSignout = function(params) {\r\n                if (signoutState == null)\r\n                    throw new Error('Signout state was not defined');\r\n                    \r\n                pipState.go(signoutState, params);  \r\n            };\r\n\r\n            pipState.goToAuthorized = function(params) {\r\n                if (authorizedState == null)\r\n                    throw new Error('Authorized state was not defined');\r\n                                        \r\n                pipState.go(authorizedState, params);\r\n            };\r\n\r\n            pipState.goToUnauthorized = function(params) {\r\n                if (unauthorizedState == null)\r\n                    throw new Error('Unauthorized state was not defined');\r\n                    \r\n                pipState.go(unauthorizedState, params);  \r\n            };\r\n\r\n            return pipState;\r\n        }];\r\n\r\n        return;        \r\n        //--------------------------------\r\n\r\n        function setSigninState(newSigninState) {\r\n            if (newSigninState)\r\n                signinState = newSigninState;\r\n            return signinState;\r\n        }\r\n\r\n        function setSignoutState(newSignoutState) {\r\n            if (newSignoutState)\r\n                signoutState = newSignoutState;\r\n            return signoutState;\r\n        }\r\n\r\n        function setAuthorizedState(newAuthorizedState) {\r\n            if (newAuthorizedState)\r\n                authorizedState = newAuthorizedState;\r\n            return authorizedState;\r\n        }\r\n\r\n        function setUnauthorizedState(newUnauthorizedState) {\r\n            if (newUnauthorizedState)\r\n                unauthorizedState = newUnauthorizedState;\r\n            return unauthorizedState;\r\n        }\r\n\r\n        // Overriding state configuration in ui-router to add auth resolves\r\n        function stateOverride(stateName, stateConfig) {\r\n            if (stateName == null)\r\n                throw new Error('stateName cannot be null');\r\n            if (stateConfig == null)\r\n                throw new Error('stateConfig cannot be null');\r\n\r\n            // todo apply in all tool\r\n            if (stateConfig.auth || stateConfig.authenticate) {\r\n                stateConfig.resolve = stateConfig.resolve || {};\r\n\r\n                stateConfig.resolve.user = /* @ngInject */ userResolver;\r\n                stateConfig.resolve.party = /* @ngInject */ partyResolver;\r\n                stateConfig.resolve.connection = /* @ngInject */ connectionResolver;\r\n                stateConfig.resolve.setting = /* @ngInject */ settingsResolver;\r\n            }    \r\n\r\n            pipStateProvider.state(stateName, stateConfig);\r\n\r\n            return this;\r\n        }\r\n\r\n        function userResolver(pipSessionCache) {\r\n            return pipSessionCache.readUser();\r\n        }\r\n\r\n        function partyResolver(pipSessionCache, $stateParams) {\r\n            return pipSessionCache.readParty($stateParams);\r\n        }\r\n\r\n        function connectionResolver(pipSessionCache, $stateParams) {\r\n            return pipSessionCache.readConnection($stateParams);\r\n        }\r\n\r\n        function settingsResolver(pipSessionCache) {\r\n            return pipSessionCache.readSettings();\r\n        }\r\n\r\n    }]);\r\n\r\n})();","/**\r\n * @file Rest API enumerations service\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global _, angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipRest.Enums', []);\r\n\r\n    thisModule.factory('pipEnums', function () {\r\n\r\n        var enums = {};\r\n    \r\n        // Converts enumeration values to string array\r\n        function enumToArray(obj) {\r\n            var result = [];\r\n    \r\n            for (var key in obj)\r\n                if (obj.hasOwnProperty(key))\r\n                    result.push(obj[key]);\r\n\r\n            return result;\r\n        };\r\n    \r\n        enums.SHARE_LEVEL = {\r\n            WORLD: 0, // Everyone\r\n            OUTER: 1, // Familiar\r\n            INNER: 2, // Trusted\r\n            PRIVATE: 3 // Private\r\n        };\r\n    \r\n        enums.URGENCY = {\r\n            LOW: 1,\r\n            NORMAL: 500,\r\n            HIGH: 1000,\r\n            MIN: 0,\r\n            MAX: 1000\r\n        };\r\n        enums.URGENCIES = enumToArray(enums.URGENCY);\r\n    \r\n        enums.IMPORTANCE = {\r\n            LOW: 1,\r\n            NORMAL: 500,\r\n            HIGH: 1000,\r\n            MIN: 0,\r\n            MAX: 1000\r\n        };\r\n        enums.IMPORTANCES = enumToArray(enums.IMPORTANCE);\r\n    \r\n        enums.CONFIDENTIALITY = {\r\n            PUBLIC: 0, // No sharing restrictions level - ANY, groups = yes, parties = yes\r\n            SENSITIVE: 1, // No public sharing - level >= OUTER, groups = yes, parties = yes\r\n            CLASSIFIED: 2, // Only selected parties - level = PRIVATE, groups = yes, parties = yes\r\n            SECRET: 3 // No sharing - level = PRIVATE, groups = no, parties = no\r\n        };\r\n        enums.CONFIDENTIALITIES = enumToArray(enums.CONFIDENTIALITY);\r\n    \r\n        enums.LEVEL = {\r\n            NONE: 0,\r\n            LOW: 1,\r\n            LOW_MEDIUM: 250,\r\n            MEDIUM: 500,\r\n            MEDIUM_HIGH: 750,\r\n            HIGH: 1000,\r\n            MIN: 0,\r\n            MAX: 1000\r\n        };\r\n    \r\n        enums.LANGUAGE = {\r\n            ENGLISH: 'en',\r\n            SPANISH: 'es',\r\n            PORTUGUESE: 'pt',\r\n            FRENCH: 'fr',\r\n            GERMAN: 'de',\r\n            RUSSIAN: 'ru'\r\n        };\r\n        enums.LANGUAGES = enumToArray(enums.LANGUAGE);\r\n    \r\n        enums.STAT_TYPE = {\r\n            DAILY: 'daily',\r\n            MONTHLY: 'monthly',\r\n            YEARLY: 'yearly',\r\n            TOTAL: 'total'\r\n        };\r\n        enums.STAT_TYPES = enumToArray(enums.STAT_TYPE);\r\n    \r\n        enums.STAT_BATCH_OPERATION = {\r\n            RECORD_SYSTEM_STATS: 'record system stats',\r\n            RECORD_PARTY_STATS: 'record party stats'\r\n        };\r\n    \r\n        enums.SERVER_TYPE = {\r\n            REALTIME_DB: 'r/t db master',\r\n            HISTORIAN_DB: 'db slave',\r\n            ANALYTICS: 'analytics',\r\n            BUSINESS_LOGIC: 'business logic',\r\n            REST_API: 'rest api',\r\n            STATIC_CONTENT: 'static content',\r\n            BACKUP_STORAGE: 'backup storage'\r\n        };\r\n        enums.SERVER_TYPES = enumToArray(enums.SERVER_TYPE);\r\n    \r\n        enums.SYSTEM_LOG_TYPE = {\r\n            INFO: 'info',\r\n            STOP: 'stop',\r\n            START: 'start',\r\n            RESTART: 'restart',\r\n            UPGRADE: 'upgrade',\r\n            MAINTENANCE: 'maintenance',\r\n            WARNING: 'warning',\r\n            ERROR: 'error'\r\n        };\r\n        enums.SYSTEM_LOG_TYPES = enumToArray(enums.SYSTEM_LOG_TYPE);\r\n    \r\n        enums.ACTIVITY_TYPE = {\r\n            SIGNUP: 'signup',\r\n            SIGNIN: 'signin',\r\n            PASSWORD_CHANGED: 'password changed',\r\n            PWD_RECOVERED: 'pwd recovered',\r\n            EMAIL_VERIFIED: 'email verified',\r\n            SETTINGS_CHANGED: 'settings changed',\r\n            PARTNERED: 'partnered',\r\n            TEAMED_UP: 'teamed up',\r\n            FOLLOWED: 'followed',\r\n            DISCONNECTED: 'disconnected',\r\n            CREATED: 'created',\r\n            UPDATED: 'updated',\r\n            DELETED: 'deleted',\r\n            ACCEPTED: 'accepted',\r\n            REJECTED: 'rejected',\r\n            JOINED: 'joined',\r\n            COMPLETED: 'completed',\r\n            CANCELED: 'canceled',\r\n            PROGRESS: 'progress',\r\n            POSTED: 'posted',\r\n            BUZZED: 'buzzed',\r\n            COMMENTED: 'commented',\r\n            CHEERED: 'cheered',\r\n            BOOED: 'booed'\r\n        };\r\n        enums.ACTIVITY_TYPES = enumToArray(enums.ACTIVITY_TYPE);\r\n    \r\n        enums.REFERENCE_TYPE = {\r\n            PARTY: 'party',\r\n            CONNECTION: 'connection',\r\n            CONTACT: 'contact',\r\n            MESSAGE: 'message',\r\n            NOTE: 'note',\r\n            AREA: 'area',\r\n            GOAL: 'goal',\r\n            EVENT: 'event',\r\n            VISION: 'vision',\r\n            COLLAGE: 'collage',\r\n            POST: 'post',\r\n            SUPPORT_CASE: 'support case',\r\n            ANNOUNCE: 'announce',\r\n            IMAGE_SET: 'image set',\r\n            FEEDBACK: 'feedback',\r\n            GUIDE: 'guide'\r\n        };\r\n        enums.REFERENCE_TYPES = enumToArray(enums.REFERENCE_TYPE);\r\n    \r\n        enums.CONTENT_TYPE = {\r\n            TEXT: 'text',\r\n            CHECKLIST: 'checklist',\r\n            LOCATION: 'location',\r\n            TIME: 'time',\r\n            PICTURES: 'pictures',\r\n            DOCUMENTS: 'documents'\r\n        };\r\n        enums.CONTENT_TYPES = enumToArray(enums.CONTENT_TYPE);\r\n    \r\n        enums.PARTY_TYPE = {\r\n            PERSON: 'person',\r\n            TEAM: 'team',\r\n            AGENT: 'agent'\r\n        };\r\n        enums.PARTY_TYPES = enumToArray(enums.PARTY_TYPE);\r\n    \r\n        enums.GENDER = {\r\n            MALE: 'male',\r\n            FEMALE: 'female',\r\n            NOT_SPECIFIED: 'n/s'\r\n        };\r\n        enums.GENDERS = enumToArray(enums.GENDER);\r\n    \r\n        enums.VISION_TYPE = {\r\n            OVERALL: 'overall',\r\n            ROLE: 'role',\r\n            MODEL: 'model',\r\n            TIME: 'time'\r\n        };\r\n        enums.VISION_TYPES = enumToArray(enums.VISION_TYPE);\r\n    \r\n        enums.AREA_TYPE = {\r\n            CATEGORY: 'category',\r\n            AREA: 'area'\r\n        };\r\n        enums.AREA_TYPES = enumToArray(enums.AREA_TYPE);\r\n    \r\n        enums.GOAL_TYPE = {\r\n            GOAL: 'goal',\r\n            OBJECTIVE: 'objective',\r\n            DREAM: 'dream',\r\n            //ASPIRATION: 'aspiration',\r\n            ACCOMPLISHMENT: 'accomplishment',\r\n            //CHORE: 'chore',\r\n            //HABIT: 'habit',\r\n            TASK: 'task',\r\n            ROUTINE: 'routine'\r\n        };\r\n        enums.GOAL_TYPES = enumToArray(enums.GOAL_TYPE);\r\n    \r\n        enums.PROCESS_NODE = {\r\n            START: 'start',\r\n            END: 'end',\r\n            EVENT: 'event',\r\n            AWAIT: 'await',\r\n            DECISION: 'decision',\r\n            ACTIVITY: 'activity'\r\n        };\r\n        enums.PROCESS_NODES = enumToArray(enums.PROCESS_NODE);\r\n    \r\n        enums.CALCULATION_METHOD = {\r\n            LAST_VALUE: 'last value',\r\n            SUM: 'sum',\r\n            MAX: 'max',\r\n            MIN: 'min',\r\n            AVERAGE: 'average'\r\n        };\r\n        enums.CALCULATION_METHODS = enumToArray(enums.CALCULATION_METHOD);\r\n    \r\n        enums.EXECUTION_STATUS = {\r\n            NEW: 'new',\r\n            ASSIGNED: 'assigned',\r\n            IN_PROGRESS: 'in progress',\r\n            VERIFYING: 'verifying',\r\n            ON_HOLD: 'on hold',\r\n            CANCELED: 'canceled',\r\n            COMPLETED: 'completed'\r\n        };\r\n        enums.EXECUTION_STATUSES = enumToArray(enums.EXECUTION_STATUS);\r\n    \r\n        enums.CONTRIBUTOR_ROLE = {\r\n            UNDEFINED: 'undefined',\r\n            RESPONSIBLE: 'responsible',\r\n            ACCOUNTABLE: 'accountable',\r\n            CONSULTED: 'consulted',\r\n            INFORMED: 'informed'\r\n        };\r\n        enums.CONSTRIBUTOR_ROLES = enumToArray(enums.CONTRIBUTOR_ROLE);\r\n    \r\n        enums.ACCEPTANCE = {\r\n            JOINED: 'joined',\r\n            INVITED: 'invited',\r\n            ACCEPTED: 'accepted'\r\n            //REJECTED: 'rejected'\r\n        };\r\n        enums.ACCEPTANCES = enumToArray(enums.ACCEPTANCE);\r\n    \r\n        enums.ACCEPT_ACTION = {\r\n            INVITE: 'invite',\r\n            JOIN: 'join',\r\n            ACCEPT: 'accept',\r\n            REJECT: 'reject'\r\n        };\r\n        enums.ACCEPT_ACTIONS = enumToArray(enums.ACCEPT_ACTION);\r\n    \r\n        enums.JOIN_METHOD = {\r\n            INVITE: 'invite',\r\n            APPROVE: 'approve',\r\n            OPEN: 'open'\r\n        };\r\n        enums.JOIN_METHODS = enumToArray(enums.JOIN_METHOD);\r\n    \r\n        enums.SKILL_LEVEL = {\r\n            NOVICE: 'novice',\r\n            INTERMEDIATE: 'intermediate',\r\n            ADVANCED: 'advanced',\r\n            EXPERT: 'expert'\r\n        };\r\n        enums.SKILL_LEVELS = enumToArray(enums.SKILL_LEVEL);\r\n    \r\n        enums.FEEDBACK_TYPE = {\r\n            SUPPORT: 'support',\r\n            TEAM: 'team',\r\n            MEETUP: 'meetup',\r\n            COPYRIGHT: 'copyright',\r\n            BUSINESS: 'business',\r\n            ADVERTISEMENT: 'ad'\r\n        };\r\n        enums.FEEDBACK_TYPES = enumToArray(enums.FEEDBACK_TYPE);\r\n    \r\n        enums.NOTE_CATEGORY = {\r\n            GENERAL: 'general',\r\n            UNFINISHED: 'unfinished',\r\n            ULTIMATE_TODO: 'ultimate todo'\r\n        };\r\n        enums.NOTE_CATEGORIES = enumToArray(enums.NOTE_CATEGORY);\r\n    \r\n        enums.CONNECTION_TYPE = {\r\n            PARTNER: 'partner',\r\n            MEMBER: 'member',\r\n            FOLLOW: 'follow',\r\n            AUTOMATION: 'automation'\r\n        };\r\n        enums.CONNECTION_TYPES = enumToArray(enums.CONNECTION_TYPE);\r\n    \r\n        enums.EVENT_TYPE = {\r\n            INSTANCE: 'instance',\r\n            RECURRENCE: 'recurrence',\r\n            AUTO_INSTANCE: 'auto',\r\n            TIME_ENTRY: 'time entry'\r\n        };\r\n        enums.EVENT_TYPES = enumToArray(enums.EVENT_TYPE);\r\n    \r\n        enums.EVENT_CATEGORY = {\r\n            DAILY: 'daily',\r\n            WEEKLY: 'weekly',\r\n            MONTHLY: 'monthly',\r\n            YEARLY: 'yearly'\r\n            //    COULDDO: 'coulddo'\r\n        };\r\n        enums.EVENT_CATEGORIES = enumToArray(enums.EVENT_CATEGORY);\r\n    \r\n        enums.COMMENT_TYPE = {\r\n            BUZZ: 'buzz',\r\n            CHEER: 'cheer',\r\n            BOO: 'boo',\r\n            COMMENT: 'comment'\r\n        };\r\n        enums.COMMENT_TYPES = enumToArray(enums.COMMENT_TYPE);\r\n    \r\n        enums.POST_TYPE = {\r\n            INFO: 'info',\r\n            QUESTION: 'question',\r\n            ISSUE: 'issue',\r\n            REPORT: 'report',\r\n            FORECAST: 'forecast'\r\n        };\r\n        enums.POST_TYPES = enumToArray(enums.POST_TYPE);\r\n    \r\n        enums.MESSAGE_TYPE = {\r\n            REGULAR: 'regular',\r\n            EMAIL: 'email',\r\n            INVITATION: 'invitation'\r\n        };\r\n        enums.MESSAGE_TYPES = enumToArray(enums.MESSAGE_TYPE);\r\n    \r\n        enums.NOTIFICATION_TYPE = {\r\n            GREETING: 'greeting',\r\n            MESSAGE: 'message',\r\n    \r\n            PARTNER_INVITE: 'partner invite',\r\n            PARTNER_RESPONSE_ACCEPTED: 'partner response accepted',\r\n            PARTNER_RESPONSE_REJECTED: 'partner response rejected',\r\n            PARTNER_JOINED: 'partner joined',\r\n            MEMBER_INVITE: 'member invite',\r\n            MEMBER_REQUEST: 'member request',\r\n            MEMBER_RESPONSE_ACCEPTED: 'member response accepted',\r\n            MEMBER_RESPONSE_REJECTED: 'member response rejected',\r\n            MEMBER_JOINED: 'member joined',\r\n            FOLLOWER_JOINED: 'follower joined',\r\n    \r\n            ENTITY_REQUEST: 'entity request',\r\n            ENTITY_REQUEST_ACCEPTED: 'entity request accepted',\r\n            ENTITY_REQUEST_REJECTED: 'entity request rejected',\r\n            ENTITY_INVITE: 'entity invite',\r\n            ENTITY_INVITE_ACCEPTED: 'entity invite accepted',\r\n            ENTITY_INVITE_REJECTED: 'entity invite rejected',\r\n            ENTITY_JOINED: 'entity joined',\r\n    \r\n            VERIFY_EMAIL: 'verify email',\r\n            COMPLETE_PROFILE: 'complete profile'\r\n        };\r\n        enums.NOTIFICATION_TYPES = enumToArray(enums.NOTIFICATION_TYPE);\r\n    \r\n        enums.NOTIFICATION_BATCH_OPERATION = {\r\n            CREATE: 'create',\r\n            REPLY: 'reply',\r\n            CLOSE: 'close',\r\n            DELETE: 'delete'\r\n        };\r\n    \r\n        enums.SUPPORT_CASE_CATEGORY = {\r\n            ACCOUNT: 'account',\r\n            BILLING: 'billing',\r\n            TECHNICAL: 'technical',\r\n            GENERAL: 'general'\r\n        };\r\n        enums.SUPPORT_CASE_CATEGORIES = enumToArray(enums.SUPPORT_CASE_CATEGORY);\r\n    \r\n        enums.ANNOUNCE_TYPE = {\r\n            APP: 'app',\r\n            EMAIL: 'email',\r\n            APP_AND_EMAIL: 'app and email'\r\n        };\r\n        enums.ANNOUNCE_TYPES = enumToArray(enums.ANNOUNCE_TYPE);\r\n    \r\n        enums.ANNOUNCE_CATEGORY = {\r\n            GENERAL: 'general',\r\n            MAINTENANCE: 'maintenance',\r\n            NEW_RELEASE: 'new release',\r\n            SURVEY: 'survey'\r\n        };\r\n        enums.ANNOUNCE_CATEGORIES = enumToArray(enums.ANNOUNCE_CATEGORY);\r\n    \r\n        enums.GUIDE_TYPE = {\r\n            INTRO: 'intro',\r\n            TOPIC: 'topic',\r\n            CONTEXT: 'context',\r\n            TIP: 'tip',\r\n            NEW_RELEASE: 'new release'\r\n        };\r\n        enums.GUIDE_TYPES = enumToArray(enums.GUIDE_TYPE);\r\n    \r\n        enums.EMAIL_TYPE = {\r\n            HOME: 'home',\r\n            WORK: 'work',\r\n            OTHER: 'other'\r\n        };\r\n        enums.EMAIL_TYPES = enumToArray(enums.EMAIL_TYPE);\r\n    \r\n        enums.ADDRESS_TYPE = {\r\n            HOME: 'home',\r\n            WORK: 'work',\r\n            OTHER: 'other'\r\n        };\r\n        enums.ADDRESS_TYPES = enumToArray(enums.ADDRESS_TYPE);\r\n    \r\n        enums.ADDRESS_TYPE = {\r\n            HOME: 'home',\r\n            WORK: 'work',\r\n            OTHER: 'other'\r\n        };\r\n        enums.ADDRESS_TYPES = enumToArray(enums.ADDRESS_TYPE);\r\n    \r\n        enums.PHONE_TYPE = {\r\n            MOBILE: 'mobile',\r\n            WORK: 'work',\r\n            HOME: 'home',\r\n            MAIN: 'main',\r\n            WORK_FAX: 'work fax',\r\n            HOME_FAX: 'home fax',\r\n            OTHER: 'other'\r\n        };\r\n        enums.PHONE_TYPES = enumToArray(enums.PHONE_TYPE);\r\n    \r\n        enums.MESSANGER_TYPE = {\r\n            SKYPE: 'skype',\r\n            GOOGLE_TALK: 'google talk',\r\n            AIM: 'aim',\r\n            YAHOO: 'yahoo',\r\n            QQ: 'qq',\r\n            MSN: 'msn',\r\n            ICQ: 'icq',\r\n            JABBER: 'jabber',\r\n            OTHER: 'other'\r\n        };\r\n        enums.MESSANGER_TYPES = enumToArray(enums.MESSANGER_TYPE);\r\n    \r\n        enums.WEB_ADDRESS_TYPE = {\r\n            PROFILE: 'profile',\r\n            BLOG: 'blog',\r\n            HOME_PAGE: 'home page',\r\n            WORK: 'work',\r\n            PORTFOLIO: 'portfolio',\r\n            OTHER: 'other'\r\n        };\r\n        enums.WEB_ADDRESS_TYPES = enumToArray(enums.WEB_ADDRESS_TYPE);\r\n    \r\n        enums.DASHBOARD_TILE_SIZE = {\r\n            SMALL: 'small',\r\n            WIDE: 'wide',\r\n            LARGE: 'large'\r\n        };\r\n        enums.DASHBOARD_TILE_SIZES = enumToArray(enums.DASHBOARD_TILE_SIZE);\r\n\r\n        return enums;\r\n    });\r\n    \r\n})();\r\n","/**\r\n * @file PipServices Rest API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n * @todo:\r\n * - Separate application and administrative APIs\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipRest', [\r\n        'ngResource',\r\n        'pipRest.Enums', 'pipRest.Access',\r\n        'pipRest.Session', 'pipRest.State'\r\n    ]);\r\n\r\n    thisModule.provider('pipRest', ['$httpProvider', function ($httpProvider) {\r\n        var serverUrl = '';\r\n        var serverUrlFixed = false;\r\n        var api = [];\r\n        this.addApi = addApi;\r\n\r\n        function addApi(extension) {\r\n            for (var request in extension) {\r\n                api[request] = extension[request];\r\n            }\r\n        };\r\n\r\n        // Set default API version\r\n        $httpProvider.defaults.headers.common['api-version'] = '1.0';\r\n\r\n\r\n        this.version = function (newVersion) {\r\n            if (newVersion)\r\n                $httpProvider.defaults.headers.common['api-version'] = newVersion;\r\n            return $httpProvider.defaults.headers.common['api-version'];\r\n        };\r\n\r\n        this.serverUrlFixed = function (value) {\r\n            if (value === true || value === 'on')\r\n                serverUrlFixed = value;\r\n            return serverUrlFixed;\r\n        };\r\n\r\n        this.serverUrl = function (newServerUrl) {\r\n            if (newServerUrl)\r\n                serverUrl = newServerUrl;\r\n            return newServerUrl;\r\n        };\r\n\r\n        this.$get = ['$rootScope', '$http', '$resource', function ($rootScope, $http, $resource) {\r\n\r\n            function createResource(url, path, paramDefaults, actions) {\r\n                url = url || serverUrl;\r\n                return $resource(url + path, paramDefaults, actions);\r\n            };\r\n\r\n            function createOperation(url, path) {\r\n                url = url || serverUrl;\r\n                return $resource(url + path, {},\r\n                    {\r\n                        call: {method: 'POST'}\r\n                    }\r\n                );\r\n            };\r\n\r\n            function createCollection(url, path, paramDefaults) {\r\n                url = url || serverUrl;\r\n                return $resource(url + path,\r\n                    paramDefaults || {id: '@id'},\r\n                    {\r\n                        update: {method: 'PUT'}\r\n                    }\r\n                );\r\n            };\r\n\r\n            function createPagedCollection(url, path, paramDefaults) {\r\n                url = url || serverUrl;\r\n                return $resource(url + path,\r\n                    paramDefaults || {id: '@id'},\r\n                    {\r\n                        page: {method: 'GET', isArray: false},\r\n                        update: {method: 'PUT'}\r\n                    }\r\n                );\r\n            };\r\n\r\n            function createPartyCollection(url, path, paramDefaults) {\r\n                return createPagedCollection(url, path, paramDefaults ||\r\n                    {\r\n                        id: '@id',\r\n                        party_id: '@party_id'\r\n                    }\r\n                );\r\n            };\r\n\r\n            var restApi = {\r\n                \r\n                version: function (newVersion) {\r\n                    if (newVersion)\r\n                        $httpProvider.defaults.headers.common['api-version'] = newVersion;\r\n                    return $httpProvider.defaults.headers.common['api-version'];\r\n                },\r\n\r\n                serverUrl: function (newServerUrl) {\r\n                    if (newServerUrl) {\r\n                        serverUrl = newServerUrl;\r\n                    }\r\n                    return serverUrl;\r\n                },\r\n\r\n                userId: function () {\r\n                    return $http.defaults.headers.common['user-id'];\r\n                },\r\n\r\n                serverUrlFixed: function () {\r\n                    return serverUrlFixed;\r\n                },\r\n\r\n                sessionId: function () {\r\n                    return $http.defaults.headers.common['session-id'];\r\n                },\r\n\r\n                // Used in routing\r\n                partyId: function ($stateParams) {\r\n                    return $stateParams.party_id || $http.defaults.headers.common['user-id'];\r\n                },\r\n\r\n                about: function (url) {\r\n                    return createResource(url, '/api/about');\r\n                },\r\n\r\n                session: function (userId, sessionId) {\r\n                    $http.defaults.headers.common['session-id'] = sessionId;\r\n                    $http.defaults.headers.common['user-id'] = userId;\r\n                },\r\n\r\n                signin: function (url) {\r\n                    return createOperation(url, '/api/signin');\r\n                },\r\n\r\n                signout: function (url) {\r\n                    return createOperation(url, '/api/signout');\r\n                },\r\n\r\n                signup: function (url) {\r\n                    return createOperation(url, '/api/signup');\r\n                },\r\n\r\n                recoverPassword: function (url) {\r\n                    return createOperation(url, '/api/recover_password');\r\n                },\r\n\r\n                resetPassword: function (url) {\r\n                    return createOperation(url, '/api/reset_password');\r\n                },\r\n\r\n                changePassword: function (url) {\r\n                    return createOperation(url, '/api/change_password');\r\n                },\r\n\r\n                requestEmailVerification: function (url) {\r\n                    return createCollection(url, '/api/users/:party_id/resend_email_verification');\r\n                },\r\n\r\n                verifyEmail: function (url) {\r\n                    return createOperation(url, '/api/verify_email');\r\n                },\r\n\r\n                signupValidate: function (url) {\r\n                    return createOperation(url, '/api/signup_validate');\r\n                },\r\n\r\n                users: function (url) {\r\n                    return createPagedCollection(url, '/api/users/:id');\r\n                },\r\n\r\n                currentUser: function (url) {\r\n                    return createResource(url, '/api/users/current',\r\n                        {},\r\n                        {\r\n                            get: {method: 'GET', isArray: false}\r\n                        }\r\n                    );\r\n                },\r\n\r\n                userSessions: function (url) {\r\n                    return createPartyCollection(url, '/api/users/:party_id/sessions/:id');\r\n                },\r\n\r\n                parties: function (url) {\r\n                    return createPagedCollection(url, '/api/parties/:id');\r\n                },\r\n\r\n                partySettings: function (url) {\r\n                    return createPartyCollection(url, '/api/parties/:party_id/settings');\r\n                },\r\n\r\n                serverActivities: function (url) {\r\n                    return createPagedCollection(url, '/api/servers/activities/:id');\r\n                },\r\n\r\n                guides: function (url) {\r\n                    return createPagedCollection(url, '/api/guides/:id');\r\n                },\r\n\r\n                tips: function (url) {\r\n                    return createPagedCollection(url, '/api/tips/:id');\r\n                },\r\n\r\n                image_sets: function (url) {\r\n                    return createPagedCollection(url, '/api/image_sets/:id');\r\n                },\r\n\r\n                images: function (url) {\r\n                    return createPagedCollection(url, '/api/images/search');\r\n                },\r\n\r\n                feedbacks: function (url) {\r\n                    return createPartyCollection(url, '/api/feedbacks/:id');\r\n                },\r\n\r\n                announces: function (url) {\r\n                    return createPagedCollection(url, '/api/announcements/:id');\r\n                },\r\n\r\n                // for testing\r\n                //--------------\r\n\r\n                createResource: createResource,\r\n                createOperation: createOperation,\r\n                createCollection: createCollection,\r\n                createPagedCollection: createPagedCollection,\r\n                createPartyCollection: createPartyCollection\r\n\r\n            };\r\n\r\n            function addApi() {\r\n                for (var call in api) {\r\n                    restApi[call] = api[call];\r\n                }\r\n            };\r\n\r\n            addApi();\r\n\r\n\r\n            return restApi;\r\n        }];\r\n    }]);\r\n\r\n})();\r\n","/**\r\n * @file Session service for PipServices Rest API\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipRest.Session', ['ngCookies', 'pipRest']);\r\n\r\n    thisModule.run(['pipSession', function(pipSession) {\r\n        // Reload session to avoid signin\r\n        pipSession.reopen();\r\n    }]);\r\n\r\n    thisModule.factory('pipSession', \r\n        ['$rootScope', '$http', 'localStorageService', '$cookieStore', 'pipRest', 'pipTimer', function ($rootScope, $http, localStorageService, $cookieStore, pipRest, pipTimer) {\r\n            var \r\n                currentOperation = undefined,\r\n                sessionId, userId, serverUrl;\r\n\r\n            return {\r\n                opened: opened,\r\n                userId: getUserId,\r\n                sessionId: getSessionId,\r\n                serverUrl: getServerUrl,\r\n\r\n                lastUsedEmail: lastUsedEmail,\r\n                //lastUsedPassword: lastUsedPassword,\r\n                usedServers: usedServers,\r\n                usedServerUrls: usedServerUrls,\r\n\r\n                signin: signin,\r\n                abort: abort,\r\n                signout: signout,\r\n\r\n                open: open,\r\n                close: close,\r\n                reopen: reopen\r\n            };\r\n            //-----------------------\r\n\r\n            // Session Ids\r\n            //---------------\r\n\r\n            function getUserId() {\r\n                return userId;\r\n            };\r\n\r\n            function getSessionId() {\r\n                return sessionId;  \r\n            };\r\n\r\n            function getServerUrl() {\r\n                return serverUrl || localStorageService.get('serverUrl');\r\n            };\r\n\r\n            function opened() {\r\n                var isOpened = (sessionId !== '' && sessionId !== null && sessionId !== undefined) &&\r\n                    (userId !== '' && userId !== null && userId !== undefined) &&\r\n                    (serverUrl !== '' && serverUrl !== null && serverUrl !== undefined);\r\n\r\n                return isOpened;\r\n            };\r\n\r\n            // Saved connection settings\r\n            //----------------------------\r\n            \r\n            function lastUsedEmail(serverUrl) {\r\n                var servers = localStorageService.get('servers');\r\n                if (servers && servers[serverUrl]) {\r\n                    return servers[serverUrl].email;\r\n                }\r\n                return undefined;\r\n            };\r\n\r\n            function usedServers() {\r\n                return localStorageService.get('servers') || {};\r\n            };\r\n\r\n            function usedServerUrls() {\r\n                var \r\n                    servers = localStorageService.get('servers'),\r\n                    serverUrls = [], serverUrl;\r\n                        \r\n                for (var prop in servers) {\r\n                    if (servers.hasOwnProperty(prop)) {\r\n                        serverUrl = servers[prop].serverUrl;\r\n                        if (serverUrl) {\r\n                            serverUrls.push(serverUrl);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return serverUrls;\r\n            };\r\n\r\n            // Session management\r\n            //---------------------\r\n\r\n            function signin(params, successCallback, errorCallback) {\r\n                var \r\n                    serverUrl = params.serverUrl,\r\n                    email = params.email,\r\n                    password = params.password,\r\n                    remember = params.remember,\r\n                    adminOnly = !!params.adminOnly,\r\n                    thisOperation = new Date().getTime();\r\n\r\n                currentOperation = thisOperation;\r\n\r\n                $http.defaults.headers.common['session-id'] = undefined;\r\n                $http.defaults.headers.common['user-id'] = undefined;\r\n                $http.defaults.headers.common['account-id'] = undefined;\r\n\r\n                pipRest.signin(serverUrl).call(\r\n                    { \r\n                        email: email, \r\n                        password: password,\r\n                        remember: remember\r\n                    },\r\n                    function(user) {\r\n                        if (currentOperation != thisOperation) {\r\n                            return;\r\n                        } else {\r\n                            currentOperation = undefined;\r\n\r\n                            if (adminOnly && !user.admin) {\r\n                                errorCallback('ERROR_ADMIN_ONLY_ACCESS');\r\n                            } else {\r\n                                open(serverUrl, user, remember);\r\n                                $rootScope.$broadcast('pipAutoPullChanges');\r\n                                successCallback(user);\r\n                            }\r\n                        }\r\n                    }, \r\n                    function(error) {\r\n                        if (currentOperation != thisOperation) {\r\n                            return;\r\n                        } else {\r\n                            currentOperation = undefined;\r\n                            errorCallback(error);   \r\n                        }\r\n                    }\r\n                );\r\n            };\r\n\r\n            function signup(params, successCallback, errorCallback) {\r\n                var \r\n                    serverUrl = params.serverUrl,\r\n                    name = params.name,\r\n                    email = params.email,\r\n                    password = params.password,\r\n                    language = params.language,\r\n                    remember = false,\r\n                    thisOperation = new Date().getTime();\r\n\r\n                pipRest.signup(serverUrl).call(\r\n                    {\r\n                        name: name,\r\n                        email: email,\r\n                        password: password,\r\n                        language: language\r\n                    },\r\n                    function(user) {\r\n                        if (currentOperation != thisOperation) {\r\n                            return;\r\n                        } else {\r\n                            currentOperation = undefined;\r\n\r\n                            open(serverUrl, user, remember);\r\n                            successCallback(user);\r\n                        }\r\n                    }, \r\n                    function(error) {\r\n                        if (currentOperation != thisOperation) {\r\n                            return;\r\n                        } else {\r\n                            currentOperation = undefined;\r\n                            errorCallback(error);   \r\n                        }\r\n                    }\r\n                );\r\n            };\r\n\r\n            function abort() {\r\n                currentOperation = undefined;\r\n            };\r\n\r\n            function signout(callback) {\r\n                if (opened()) {\r\n                    pipRest.signout().call({}, callback, callback);\r\n                }\r\n\r\n                close();\r\n            };\r\n\r\n            function open(currentServerUrl, user, remember) {\r\n                sessionId = user.last_session_id;\r\n                userId = user.id;\r\n                serverUrl = currentServerUrl;\r\n\r\n                // Set default headers for subsequent HTTP requests\r\n                $http.defaults.headers.common['session-id'] = sessionId;\r\n                $http.defaults.headers.common['user-id'] = userId;\r\n\r\n                // Save ids into local storage\r\n                if (remember) {\r\n                    var servers = localStorageService.get('servers') || {};\r\n                    servers[serverUrl] = {\r\n                        serverUrl: serverUrl,\r\n                        email: user.email\r\n                    };\r\n                    localStorageService.set('servers', servers);\r\n\r\n                    localStorageService.set('sessionId', sessionId);\r\n                    localStorageService.set('userId', userId);\r\n                    localStorageService.set('serverUrl', serverUrl);\r\n                }\r\n\r\n                // Save into session id to retain the connection while browser is running\r\n                // Remove from cookie store\r\n                $cookieStore.put('user-id', userId);\r\n                $cookieStore.put('session-id', sessionId);\r\n                $cookieStore.put('server-url', serverUrl);\r\n\r\n                // Save context parameters do not save\r\n                if (!pipRest.serverUrlFixed()) pipRest.serverUrl(serverUrl);\r\n                \r\n                // Send broadcast\r\n                // saveSession data\r\n                $rootScope.$emit(\r\n                    'pipSessionOpened', \r\n                    { \r\n                        serverUrl: serverUrl,\r\n                        sessionId: sessionId,\r\n                        userId: userId,\r\n                        user: user\r\n                    }\r\n                );\r\n                pipTimer.start();\r\n            };\r\n\r\n            function reopen() {\r\n                userId = $cookieStore.get('user-id') || localStorageService.get('userId');\r\n                sessionId = $cookieStore.get('session-id') || localStorageService.get('sessionId');\r\n                serverUrl = $cookieStore.get('server-url') || localStorageService.get('serverUrl');\r\n\r\n                // Set default headers for subsequent HTTP requests\r\n                $http.defaults.headers.common['session-id'] = sessionId;\r\n                $http.defaults.headers.common['user-id'] = userId;\r\n\r\n                if (!pipRest.serverUrlFixed() || !pipRest.serverUrl()) pipRest.serverUrl(serverUrl);\r\n                $rootScope.$serverUrl = pipRest.serverUrl();\r\n                // Send broadcast\r\n                $rootScope.$emit(\r\n                    'pipSessionOpened', \r\n                    { \r\n                        serverUrl: serverUrl,\r\n                        sessionId: sessionId,\r\n                        userId: userId\r\n                    }\r\n                );\r\n                pipTimer.start();\r\n            };\r\n\r\n            function close() {\r\n                sessionId = undefined;\r\n                userId = undefined;\r\n                        \r\n                // Unset default headers for subsequent HTTP requests\r\n                $http.defaults.headers.common['session-id'] = undefined;\r\n                $http.defaults.headers.common['user-id'] = undefined;\r\n\r\n                // Remove ids into local storage\r\n                localStorageService.remove('userId');\r\n                localStorageService.remove('sessionId');\r\n\r\n                // Remove from cookie store\r\n                $cookieStore.remove('user-id');\r\n                $cookieStore.remove('session-id');\r\n\r\n                // RemoveToastMessages\r\n                pipTimer.stop();\r\n\r\n                // Send broadcast\r\n                // RemoveToastMessages\r\n                $rootScope.$emit('pipSessionClosed');\r\n            };\r\n        }]\r\n    );\r\n\r\n})();","/**\r\n * @file Announces data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global angular */\r\n \r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipAnnouncesData', ['pipRest', 'pipDataModel', 'pipAnnouncesCache']);\r\n\r\n    thisModule.provider('pipAnnouncesData', function () {\r\n\r\n        // Read all announces\r\n        this.readAnnouncesResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', 'pipEnums', function ($stateParams, pipRest, pipEnums) {\r\n                return pipRest.announces().query().$promise;\r\n            }];\r\n        };\r\n\r\n        this.readCompletedAnnouncesResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', 'pipEnums', function ($stateParams, pipRest, pipEnums) {\r\n                return pipRest.announces().query( {\r\n                        status: pipEnums.EXECUTION_STATUS.COMPLETED\r\n                    }\r\n                ).$promise;\r\n            }];\r\n        };\r\n\r\n        this.readAnnounceResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.announces().get({\r\n                    id: $stateParams.id\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', 'pipAnnouncesCache', function (pipRest, $stateParams, pipDataModel, pipAnnouncesCache) {\r\n            return {\r\n                partyId: pipRest.partyId,\r\n                readAnnounces: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'announces';\r\n                    params.item = params.item || {};\r\n                    params.item.search = $stateParams.search;\r\n                    params.item.tags = $stateParams.search;\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    return pipAnnouncesCache.readAnnounces(params, successCallback, errorCallback);\r\n                },\r\n\r\n                updateAnnounce: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'announces';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.update(\r\n                        params,\r\n                        pipAnnouncesCache.onAnnounceCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n                \r\n                updateAnnounceWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'announces';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.update(\r\n                            params,\r\n                            pipAnnouncesCache.onAnnounceUpdate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                createAnnounceWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'announces';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.create(\r\n                            params,\r\n                            pipAnnouncesCache.onAnnounceCreate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n                \r\n                createAnnounce: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'announces';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.create(\r\n                        params,\r\n                        pipAnnouncesCache.onAnnounceCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                deleteAnnounce: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'announces';\r\n                    pipDataModel.remove(params, pipAnnouncesCache.onAnnounceDelete(params, successCallback), errorCallback);\r\n                }\r\n            }\r\n        }];\r\n    });\r\n\r\n})();","/**\r\n * @file Registration of all data modules\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular.module('pipData', [\r\n\t\t'pipDataModel',\r\n\t\t'pipDataCache',\r\n        \r\n        'pipUsersData',\r\n        'pipSettingsData',\r\n        'pipSessionData',\r\n        'pipTagsData',\r\n\r\n        'pipAnnouncesData',\r\n        'pipFeedbacksData',\r\n        'pipImageSetsData',\r\n\r\n        'pipTipsCache',\r\n        'pipTipsData',\r\n\r\n        'pipGuidesCache',\r\n        'pipGuidesData'\r\n    ]);\r\n    \r\n})();","/**\r\n * @file Application abstract data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular, _, async */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipDataModel', ['pipUtils', 'pipRest']);\r\n\r\n    thisModule.provider('pipDataModel', function() {\r\n        \r\n        this.$get = ['$stateParams', 'pipCollections', 'pipRest', function($stateParams, pipCollections, pipRest) {\r\n\r\n            var api = [];\r\n            \r\n            for (var call in pipRest) {\r\n                api[call] = pipRest[call];\r\n            }\r\n\r\n            // function extendApi(extension) {\r\n            //     for (var call in extension) {\r\n            //         api[call] = extension[call];\r\n            //     }\r\n            // }\r\n\r\n            // Execute request to REST API\r\n            function executeCurl(params, successCallback, errorCallback) {\r\n                var t = params.transaction, tid;\r\n\r\n                if (t && !params.skipTransactionBegin) {\r\n                    tid = params.transactionId = t.begin(\r\n                        params.transactionOperation || 'PROCESSING'\r\n                    );\r\n                    if (!tid) return;\r\n                }\r\n\r\n                return api[params.resource]()[params.operation](\r\n                    params.item,\r\n                    function (result) {\r\n                        if (t && tid && t.aborted(tid)) return;\r\n                        if (t && !params.skipTransactionEnd) t.end();\r\n                        if (successCallback) successCallback(result);\r\n                    },\r\n                    function (error) {\r\n                        if (t) t.end(error);\r\n                        if (errorCallback) errorCallback(error);\r\n                    }\r\n                );\r\n            };\r\n\r\n            // Create an object and add it to object collection\r\n            function createCurl(params, successCallback, errorCallback) {\r\n                params.transactionOperation = params.transactionOperation || 'SAVING';\r\n                params.operation = params.operation || 'save';\r\n                \r\n                return executeCurl(\r\n                    params,\r\n                    function(result) {\r\n                        if (params.itemCollection)\r\n                            params.itemCollection.push(result);\r\n\r\n                        if (successCallback) successCallback(result);\r\n                    },\r\n                    function(error){\r\n                        if (errorCallback) errorCallback(error);\r\n                    }\r\n                );\r\n            };\r\n\r\n            // Update an object and replace it in object collection\r\n            function updateCurl(params, successCallback, errorCallback) {\r\n                params.transactionOperation = params.transactionOperation || 'SAVING';\r\n                params.operation = params.operation || 'update';\r\n\r\n                return  executeCurl(\r\n                    params,\r\n                    function(result) {\r\n                        if (params.itemCollection)\r\n                            pipCollections.replaceBy(params.itemCollection, 'id', result.id, result);\r\n\r\n                        if (successCallback) successCallback(result);\r\n                    },\r\n                    errorCallback\r\n                );\r\n            };\r\n\r\n            // Update an object and remove it from object collection\r\n            function deleteCurl(params, successCallback, errorCallback) {\r\n                params.transactionOperation = params.transactionOperation || 'SAVING';\r\n                params.operation = params.operation || 'remove';\r\n\r\n                return executeCurl(\r\n                    params,\r\n                    function(result) {\r\n                        if (params.itemCollection)\r\n                            _.remove(params.itemCollection, {id: result.id || (params.object || {}).id || (params.item || {}).id});\r\n\r\n                        if (successCallback) successCallback(result);\r\n                    },\r\n                    errorCallback\r\n                );\r\n            };\r\n\r\n            // Read a collection of objects\r\n            function readCurl(params, successCallback, errorCallback) {\r\n                params.transactionOperation = params.transactionOperation || 'READING';\r\n                params.operation = params.operation || 'query';\r\n\r\n                return executeCurl(\r\n                    params,\r\n                    function(result) {\r\n                        if (successCallback) successCallback(result);\r\n                    },\r\n                    errorCallback\r\n                );\r\n            };\r\n\r\n            // Read a single object and add it into collection\r\n            function readOneCurl(params, successCallback, errorCallback) {\r\n                params.transactionOperation = params.transactionOperation || 'READING';\r\n                params.operation = params.operation || 'page';\r\n\r\n                return executeCurl(\r\n                    params,\r\n                    function(result) {\r\n                        if (params.itemCollection && result) {\r\n                            var index = _.findIndex(params.itemCollection, {id: result.id});\r\n                            if (index >= 0) params.itemCollection[index] = result;\r\n                            else params.itemCollection.push(result);\r\n                        }\r\n\r\n                        if (successCallback) successCallback(result);\r\n                    },\r\n                    errorCallback\r\n                );\r\n            };\r\n\r\n            // Read a page and add results into object collection\r\n            function pageCurl(params, successCallback, errorCallback) {\r\n                params.transactionOperation = params.transactionOperation || 'READING';\r\n                params.operation = params.operation || 'page';\r\n\r\n                return executeCurl(\r\n                    params,\r\n                    function(result) {\r\n                        if (params.itemCollection && result.data) {\r\n                            for (var i = 0; i < result.data.length; i++)\r\n                                params.itemCollection.push(result.data[i]);\r\n                        }\r\n\r\n                        if (successCallback) successCallback(result);\r\n                    },\r\n                    errorCallback\r\n                );\r\n            };\r\n\r\n            // Save picture and document files\r\n            function saveFilesCurl(params, successCallback, errorCallback) {\r\n                var t = params.transaction, tid;\r\n\r\n                // Start transaction if necessary\r\n                if (t && !params.skipTransactionBegin) {\r\n                    tid = params.transactionId = t.begin(\r\n                        params.transactionOperation || 'SAVING'\r\n                    );\r\n                    if (!tid) return;\r\n                }\r\n\r\n//------------------\r\n\r\n                var uploadFiles = [{\r\n                    pictures: params.pictures,\r\n                    documents: params.documents\r\n                }];\r\n\r\n                // from content\r\n                if (params.item && params.item.content ) {\r\n                    var saveResult = true;\r\n                    async.eachSeries(_.union(params.item.content, uploadFiles),\r\n                        function (obj, callback) {\r\n                            // не выбран - пропускаем этот item  || нет этого события action\r\n                            if ( !obj.pictures && !obj.documents ) {\r\n                                callback();\r\n                            } else {\r\n                                if (obj.pictures) {\r\n                                    // Save pictures first\r\n                                    obj.pictures.save(\r\n                                        function () {\r\n                                            if (t && tid && t.aborted(tid)) {\r\n                                                saveResult =  false;\r\n                                                callback('aborted');\r\n                                            }\r\n                                            // Save documents second\r\n                                            if (obj.documents) {\r\n                                                obj.documents.save(\r\n                                                    function () {\r\n                                                        if (t && tid && t.aborted(tid)) {\r\n                                                            saveResult =  false;\r\n                                                            callback('aborted');\r\n                                                        }\r\n                                                        callback();\r\n                                                    },\r\n                                                    function (error) {\r\n                                                        saveResult =  false;\r\n                                                        callback(error);\r\n                                                    }\r\n                                                );\r\n                                            } else {\r\n                                                callback();\r\n                                            }\r\n                                        },\r\n                                        function (error) {\r\n                                            saveResult =  false;\r\n                                            callback(error);\r\n                                        }\r\n                                    );\r\n                                } else {\r\n                                    if (obj.documents) {\r\n                                        // Save documents first\r\n                                        obj.documents.save(\r\n                                            function () {\r\n                                                if (t && tid && t.aborted(tid)) {\r\n                                                    saveResult = false;\r\n                                                    callback('aborted');\r\n                                                }\r\n                                                callback();\r\n                                            },\r\n                                            function (error) {\r\n                                                saveResult = false;\r\n                                                callback(error);\r\n                                            }\r\n                                        );\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                        function (error) {\r\n                            if (!error && saveResult) {\r\n                                // удаляем ненужные объекты перед сохранением\r\n                                // вызываем колбек\r\n                                if (t & !params.skipTransactionEnd) t.end();\r\n                                _.each(params.item.content, function(item){\r\n                                    delete item.pictures;\r\n                                    delete item.documents;\r\n                                });\r\n                                if (successCallback) successCallback();\r\n                            } else {\r\n                                // вызываем ошибочный колбек\r\n                                if (t) t.end(error);\r\n                                if (errorCallback) {\r\n                                    errorCallback(error);\r\n                                }\r\n                            }\r\n                        }\r\n                    );\r\n                } else {\r\n                    if (params.pictures) {\r\n                        // Save pictures first\r\n                        params.pictures.save(\r\n                            function () {\r\n                                if (t && tid && t.aborted(tid)) return;\r\n\r\n                                // Save documents second\r\n                                if (params.documents) {\r\n                                    params.documents.save(\r\n                                        function () {\r\n                                            if (t && tid && t.aborted(tid)) return;\r\n                                            // Do everything else\r\n                                            if (t & !params.skipTransactionEnd) t.end();\r\n                                            if (successCallback) successCallback();\r\n                                        },\r\n                                        function (error) {\r\n                                            if (t) t.end(error);\r\n                                            if (errorCallback) errorCallback(error);\r\n                                        }\r\n                                    );\r\n                                } else {\r\n                                    // Do everything else\r\n                                    if (t & !params.skipTransactionEnd) t.end();\r\n                                    if (successCallback) successCallback();\r\n                                }\r\n                            },\r\n                            function (error) {\r\n                                if (t) t.end(error);\r\n                                if (errorCallback) errorCallback(error);\r\n                            }\r\n                        );\r\n                    } else if (params.documents) {\r\n                        // Save documents first\r\n                        params.documents.save(\r\n                            function () {\r\n                                if (t && tid && t.aborted(tid)) return;\r\n                                // Do everything else\r\n                                if (t & !params.skipTransactionEnd) t.end();\r\n                                if (successCallback) successCallback();\r\n                            },\r\n                            function (error) {\r\n                                if (t) t.end(error);\r\n                                if (errorCallback) errorCallback(error);\r\n                            }\r\n                        );\r\n                    } else {\r\n                        // Do everything else\r\n                        if (t & !params.skipTransactionEnd) t.end();\r\n                        if (successCallback) successCallback();\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Abort transaction with file upload\r\n            function abortFilesCurl(params) {\r\n                if (params.pictures) \r\n                    params.pictures.abort();\r\n                if (params.documents)\r\n                    params.documents.abort();\r\n                    if (params.transaction)\r\n                    params.transaction.abort();  \r\n            };\r\n\r\n            return {\r\n                // extendApi: extendApi,\r\n\r\n                // Executing transactional requests to server\r\n                execute: executeCurl,\r\n\r\n                // Creating an object\r\n                create: createCurl,\r\n\r\n                // Updating an object\r\n                update: updateCurl,\r\n                save: updateCurl,\r\n\r\n                // Deleting an object\r\n                'delete': deleteCurl,\r\n                remove: deleteCurl,\r\n\r\n                // Reading objects\r\n                read: readCurl,\r\n                query: readCurl,\r\n\r\n                // Reading a single object\r\n                readOne: readOneCurl,\r\n                get: readOneCurl,\r\n\r\n                // Reading paginated results\r\n                page: pageCurl,\r\n                readPage: pageCurl,\r\n                queryPage: pageCurl,\r\n\r\n                // Saving files to file store\r\n                saveFiles: saveFilesCurl,\r\n                abortFiles: abortFilesCurl\r\n            }\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file Feedbacks data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipFeedbacksData', ['pipRest', 'pipDataModel', 'pipFeedbacksCache']);\r\n\r\n    thisModule.provider('pipFeedbacksData', function() {\r\n\r\n        this.readFeedbacksResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.feedbacks().query().$promise;\r\n            }];\r\n        };\r\n\r\n        this.readFeedbackResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.feedbacks().get({\r\n                    id: $stateParams.id\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        this.$get = ['$stateParams', 'pipRest', 'pipDataModel', 'pipFeedbacksCache', function($stateParams, pipRest, pipDataModel, pipFeedbacksCache) {\r\n            return {\r\n\r\n                sendFeedback: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'feedbacks';\r\n                    pipDataModel.create(params, successCallback, errorCallback);\r\n                },\r\n\r\n                readFeedbacks: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'feedbacks';\r\n                    params.item = params.item || {};\r\n                    params.item.search = $stateParams.search;\r\n                    params.item.tags = $stateParams.search;\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    return pipFeedbacksCache.readFeedbacks(params, successCallback, errorCallback);\r\n                },\r\n\r\n\r\n                createFeedbackWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'feedbacks';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.create(params, successCallback, errorCallback);\r\n                    });\r\n                },\r\n\r\n                updateFeedback: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'feedbacks';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.update(\r\n                        params,\r\n                        successCallback,\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                deleteFeedback: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'feedbacks';\r\n                    pipDataModel.remove(params, successCallback, errorCallback);\r\n                }\r\n            };\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file Guides data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global angular */\r\n \r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipGuidesData', ['pipRest', 'pipDataModel']);\r\n\r\n    thisModule.provider('pipGuidesData', function () {\r\n        var PAGE_SIZE = 5;\r\n\r\n        // Read all guides\r\n        this.readGuidesResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.guides().query().$promise;\r\n            }];\r\n        };\r\n        \r\n        this.readIntroGuidesResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.guides().query({\r\n                        type: 'intro',\r\n                        status : 'completed'\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        this.readGuideResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.guides().get({\r\n                    id: $stateParams.id || '55bf23d3bb22aa175c3e498e'\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', 'pipGuidesCache', function (pipRest, $stateParams, pipDataModel, pipGuidesCache) {\r\n            return {\r\n                partyId: pipRest.partyId,\r\n\r\n                readGuides: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    params.party_id = pipRest.partyId($stateParams);\r\n                    return pipGuidesCache.readGuides(params, successCallback, errorCallback);\r\n                },\r\n\r\n                readIntroGuides: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    params.party_id = pipRest.partyId($stateParams);\r\n                    params.type = 'intro';\r\n                    params.status = 'completed';\r\n                    return pipGuidesCache.readGuides(params, successCallback, errorCallback);\r\n                },\r\n\r\n                readGuide: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.id = params.item.id || $stateParams.id;\r\n                    return pipDataModel.readOne(params, pipGuidesCache.onGuideUpdate(params, successCallback), errorCallback);\r\n                },\r\n\r\n                createGuide: function (params, successCallback, errorCallback) {\r\n                    params.resource =  'guides';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.create(\r\n                        params,\r\n                        pipGuidesCache.onGuideCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                createGuideWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'guides';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.create(\r\n                            params,\r\n                            pipGuidesCache.onGuideCreate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                updateGuide: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.update(\r\n                        params,\r\n                        pipGuidesCache.onGuideUpdate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n                \r\n                updateGuideWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'guides';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.update(\r\n                            params,\r\n                            pipGuidesCache.onGuideUpdate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                \r\n                deleteGuide: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'guides';\r\n                    pipDataModel.remove(params, pipGuidesCache.onGuideDelete(params, successCallback),  errorCallback);\r\n                }\r\n\r\n            }\r\n        }];\r\n    });\r\n\r\n})();","/**\r\n * @file Image sets data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n \r\n /* global angular */\r\n \r\n(function () {\r\n    'use strict';\r\n    \r\n    var thisModule = angular.module('pipImageSetsData', ['pipRest', 'pipDataModel', 'pipImageSetsCache']);\r\n\r\n    thisModule.provider('pipImageSetsData', function () {\r\n        var PAGE_SIZE = 15;\r\n\r\n        // Read all image sets\r\n        this.readImageSetsResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.image_sets().get({\r\n                    paging: 1,\r\n                    skip: 0,\r\n                    take: PAGE_SIZE,\r\n                    search: $stateParams.search,\r\n                    //tags: $stateParams.search\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        this.readImageSetResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.image_sets().get({\r\n                    id: $stateParams.id\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', 'pipImageSetsCache', function (pipRest, $stateParams, pipDataModel, pipImageSetsCache) {\r\n\r\n            return {\r\n                partyId: pipRest.partyId,\r\n\r\n                readImageSets: function (params, transaction, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    \r\n                    params.item = params.item || {};\r\n                    params.item.skip = params.item.skip || 0;\r\n                    params.item.search = $stateParams.search || params.item.search;\r\n                   // params.item.tags = $stateParams.search || params.item.search;\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.take = PAGE_SIZE;\r\n                    params.item.paging = 1;\r\n\r\n                    return pipDataModel.page(\r\n                        params,\r\n                        successCallback,\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                readImageSet: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.id = params.item.id || $stateParams.id;\r\n                    return pipDataModel.readOne(params, pipImageSetsCache.onImageSetUpdate(params, successCallback), errorCallback);\r\n                },\r\n\r\n                updateImageSet: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    return pipDataModel.update(\r\n                        params,\r\n                        successCallback,\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                createImageSet: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n                    params.skipTransactionBegin = true;\r\n                    params.skipTransactionEnd = false;\r\n                    pipDataModel.create(\r\n                        params,\r\n                        pipImageSetsCache.onImageSetCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n\r\n                createImageSetWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'image_sets';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.create(\r\n                            params,\r\n                            pipImageSetsCache.onImageSetCreate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                updateImageSetWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'image_sets';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        pipDataModel.update(\r\n                            params,\r\n                            successCallback,\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                deleteImageSet: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'image_sets';\r\n                    pipDataModel.remove(params, successCallback, errorCallback);\r\n                }\r\n            }\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file Session data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global _, angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipSessionData', ['pipRest', 'pipSessionCache']);\r\n\r\n    thisModule.provider('pipSessionData', function() {\r\n\r\n        readUserResolver.$inject = ['pipSessionCache'];\r\n        readPartyResolver.$inject = ['pipSessionCache', '$stateParams'];\r\n        readConnectionResolver.$inject = ['pipSessionCache', '$stateParams'];\r\n        readSettingsResolver.$inject = ['pipSessionCache'];\r\n        readSessionsUserResolver.$inject = ['$stateParams', 'pipRest', '$rootScope'];\r\n        readSessionIdResolver.$inject = ['$stateParams', 'pipSession'];\r\n        this.readUserResolver = /* @ngInject */ readUserResolver;\r\n        this.readPartyResolver = /* @ngInject */ readPartyResolver;\r\n        this.readConnectionResolver = /* @ngInject */ readConnectionResolver;\r\n        this.readSettingsResolver = /* @ngInject */ readSettingsResolver;\r\n\r\n        this.readSessionsUserResolver = /* @ngInject */ readSessionsUserResolver;\r\n        this.readSessionIdResolver = /* @ngInject */ readSessionIdResolver;\r\n\r\n        this.$get = ['$rootScope', '$stateParams', 'pipRest', 'pipDataModel', 'pipSessionCache', function($rootScope, $stateParams, pipRest, pipDataModel, pipSessionCache) {\r\n            return {\r\n                getSessionId: getSessionId,\r\n                removeSession: removeSession,\r\n                readSessionsUser: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'userSessions';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = $stateParams.id;\r\n                    params.party_id = $stateParams.id;\r\n                    return  pipSessionCache.readSessions(params, successCallback, errorCallback);\r\n\r\n                }\r\n            };\r\n\r\n            function getSessionId(pipSession){\r\n                return function () {\r\n                    return pipSession.sessionId();\r\n                };\r\n            };\r\n\r\n            function removeSession(transaction, session, successCallback, errorCallback) {\r\n                var tid = transaction.begin('REMOVING');\r\n                if (!tid) return;\r\n\r\n                pipRest.userSessions().remove(\r\n                    {\r\n                        id: session.id,\r\n                        party_id: $stateParams.id\r\n                    },\r\n                    function (removedSession) {\r\n                        if (transaction.aborted(tid)) return;\r\n                        else transaction.end();\r\n\r\n                        if (successCallback) successCallback(removedSession);\r\n                    },\r\n                    function (error) {\r\n                        transaction.end(error);\r\n                        if (errorCallback) errorCallback(error);\r\n                    }\r\n                );\r\n            };\r\n            \r\n        }];\r\n        //--------------\r\n\r\n        function readUserResolver(pipSessionCache) {\r\n            return pipSessionCache.readUser();                             \r\n        };\r\n\r\n        function readPartyResolver(pipSessionCache, $stateParams) {\r\n            return pipSessionCache.readParty($stateParams);\r\n        };\r\n\r\n        function readConnectionResolver(pipSessionCache, $stateParams) {\r\n            return pipSessionCache.readConnection($stateParams);\r\n        };\r\n\r\n        function readSettingsResolver(pipSessionCache) {\r\n            return pipSessionCache.readSettings();                             \r\n        };\r\n\r\n        function readSessionsUserResolver($stateParams, pipRest, $rootScope) {\r\n            return pipRest.userSessions().query({\r\n                party_id: $stateParams.id\r\n            }).$promise;\r\n        };\r\n\r\n        function readSessionIdResolver($stateParams, pipSession) {\r\n            return pipSession.sessionId();\r\n        };\r\n        \r\n    });\r\n\r\n})();\r\n","/**\r\n * @file Settings data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n * @todo Rewrite, use cached settings, remove unrelated methods\r\n */\r\n\r\n/* global _, angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipSettingsData', ['pipRest', 'pipSessionData', 'pipSessionCache', 'pipDataModel']);\r\n\r\n    thisModule.provider('pipSettingsData', ['pipSessionDataProvider', function (pipSessionDataProvider) {\r\n\r\n        this.readSettingsResolver = pipSessionDataProvider.readSettingsResolver;\r\n\r\n        this.$get = ['$rootScope', '$stateParams', 'pipRest', 'pipSessionCache', 'pipSession', 'pipDataModel', function ($rootScope, $stateParams, pipRest, pipSessionCache, pipSession, pipDataModel) {\r\n            return {\r\n                // Saving generic settings\r\n                saveSettings: saveSettings,\r\n                readSettings: readSettings,\r\n                reReadSettings: reReadSettings\r\n\r\n            };\r\n\r\n            function readSettings(successCallback, errorCallback) {\r\n                return pipSessionCache.readSettings(successCallback, errorCallback)\r\n            };\r\n\r\n            // force read settings from server and update cache\r\n            function reReadSettings(successCallback, errorCallback) {\r\n                return pipRest.partySettings().get(\r\n                    {\r\n                        party_id: pipSession.userId()\r\n                    },\r\n                    function (settings) {\r\n                        settings = settings || {};\r\n                        pipSessionCache.onSettingsUpdate(settings);\r\n                        if (successCallback) successCallback(settings);\r\n                    },\r\n                    errorCallback\r\n                ).$promise;\r\n            };\r\n\r\n            function saveSettings(settings, keys, successCallback, errorCallback) {\r\n                // Extract specific keys\r\n                settings = keys ? _.pick(settings, keys) : settings;\r\n                settings.party_id = pipSession.userId();\r\n                var oldSettings = _.cloneDeep($rootScope.$settings);\r\n                pipSessionCache.onSettingsUpdate(settings);\r\n\r\n                var params = {};\r\n                params.resource = 'partySettings';\r\n                params.item = settings;\r\n                params.item.creator_id = pipSession.userId();\r\n\r\n                pipDataModel.create(\r\n                    params,\r\n                    successCallback,\r\n                    function (error) {\r\n                        pipSessionCache.onSettingsUpdate(oldSettings);\r\n\r\n                        if (errorCallback) errorCallback(error);\r\n                    }\r\n                );\r\n            };\r\n        }];\r\n    }]);\r\n\r\n})();\r\n","/**\r\n * @file Tags data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipTagsData', ['pipRest' , 'pipDataModel', 'pipTagsCache']);\r\n\r\n    thisModule.provider('pipTagsData', function() {\r\n        \r\n        this.readTagsResolver = function() {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', 'pipTagsCache', function($stateParams, pipRest, pipTagsCache) {\r\n                return pipTagsCache.readTags({\r\n                    item: { party_id: pipRest.partyId($stateParams) }\r\n                });\r\n            }];\r\n        };\r\n\r\n        this.$get = ['$stateParams', '$state', 'pipRest', 'pipDataModel', 'pipTagsCache', function($stateParams, $state, pipRest, pipDataModel, pipTagsCache) {\r\n            return {\r\n                partyId: pipRest.partyId,\r\n                \r\n                readTags: function(params, successCallback, errorCallback) {\r\n                    params = params || {};\r\n                    params.item = params.item || {};\r\n                    if(params.item.party_id == null) {\r\n                        params.item.party_id = pipRest.partyId($stateParams);\r\n                    }\r\n                    return pipTagsCache.readTags(params, successCallback, errorCallback);\r\n                }\r\n            }\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file Tips data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipTipsData', ['pipRest', 'pipDataModel']);\r\n\r\n    thisModule.provider('pipTipsData', function () {\r\n        var PAGE_SIZE = 100;\r\n\r\n        // Read all tips\r\n        this.readTipsResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.tips().query().$promise;\r\n            }];\r\n        };\r\n\r\n        this.readTipResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.tips().get({\r\n                    id: $stateParams.id\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', 'pipTipsCache', function (pipRest, $stateParams, pipDataModel, pipTipsCache) {\r\n\r\n            return {\r\n                partyId: pipRest.partyId,\r\n\r\n// todo update after optimization rezolver\r\n                readTips: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    params.item = params.item || {};\r\n                    params.item.search = $stateParams.search;\r\n                    params.item.tags = $stateParams.search;\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    return pipTipsCache.readTips(params, successCallback, errorCallback);\r\n                },\r\n\r\n                readTip: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.id = params.item.id || $stateParams.id;\r\n                    return pipDataModel.readOne(params, pipTipsCache.onTipsUpdate(params, successCallback), errorCallback);\r\n                },\r\n\r\n                createTip: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.create(\r\n                        params,\r\n                        pipTipsCache.onTipCreate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n                \r\n                createTipWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'tips';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        \r\n                        params.item.party_id = pipRest.partyId($stateParams);\r\n                        pipDataModel.create(\r\n                            params,\r\n                            pipTipsCache.onTipCreate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    }, errorCallback);\r\n                },\r\n\r\n                updateTip: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.update(\r\n                        params,\r\n                        pipTipsCache.onTipUpdate(params, successCallback),\r\n                        errorCallback\r\n                    );\r\n                },\r\n                \r\n                updateTipWithFiles: function(params, successCallback, errorCallback) {\r\n                    params.skipTransactionEnd = true;\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    pipDataModel.saveFiles(params, function() {\r\n                        params.resource = 'tips';\r\n                        params.skipTransactionBegin = true;\r\n                        params.skipTransactionEnd = false;\r\n                        \r\n                        params.item.party_id = pipRest.partyId($stateParams);\r\n                        pipDataModel.update(\r\n                            params,\r\n                            pipTipsCache.onTipUpdate(params, successCallback),\r\n                            errorCallback\r\n                        );\r\n                    });\r\n                },\r\n\r\n                deleteTip: function(params, successCallback, errorCallback) {\r\n                    params.resource = 'tips';\r\n                    pipDataModel.remove(params, pipTipsCache.onTipDelete(params, successCallback), errorCallback);\r\n                }\r\n            }\r\n        }];\r\n    });\r\n\r\n})();\r\n","/**\r\n * @file Users data model\r\n * @copyright Digital Living Software Corp. 2014-2016\r\n */\r\n\r\n/* global angular */\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    var thisModule = angular.module('pipUsersData', ['pipRest']);\r\n\r\n    thisModule.provider('pipUsersData', function () {\r\n\r\n        this.readUsersResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.users().page({\r\n                    party_id: $stateParams.id,\r\n                    paging: $stateParams.paging || 1,\r\n                    skip: $stateParams.skip || 0,\r\n                    take: $stateParams.take || 15\r\n                }).$promise;\r\n            }];\r\n        };\r\n\r\n        this.readUserResolver = function () {\r\n            return /* @ngInject */ ['$stateParams', 'pipRest', function ($stateParams, pipRest) {\r\n                return pipRest.users().get({\r\n                    id: $stateParams.id,\r\n                    party_id: pipRest.partyId($stateParams)\r\n                }).$promise;\r\n\r\n            }];\r\n        };\r\n\r\n        this.readActivitiesUserResolver = /* @ngInject */\r\n            ['$stateParams', 'pipRest', '$rootScope', function ($stateParams, pipRest, $rootScope) {\r\n                return pipRest.partyActivities().page({\r\n                    party_id: $rootScope.$user.id,\r\n                    paging: 1,\r\n                    skip: 0,\r\n                    take: 25\r\n                }).$promise;\r\n            }];\r\n\r\n        // CRUD operations and other business methods\r\n        this.$get = ['pipRest', '$stateParams', 'pipDataModel', function (pipRest, $stateParams, pipDataModel) {   \r\n            return {\r\n                partyId: pipRest.partyId,\r\n\r\n                readUsers: function (params, transaction, successCallback, errorCallback) {\r\n                    return pipRest.users().page(\r\n                        {\r\n                            party_id: pipRest.partyId($stateParams),\r\n                            paging: 1,\r\n                            skip: params.start || params.item.skip || 0,\r\n                            search: params.item.search ,\r\n                            active: params.item.active,\r\n                            paid: params.item.paid,\r\n                            admin: params.item.admin,\r\n                            take: 15\r\n                        },\r\n                        function (pagedUsers) {\r\n                            if (successCallback) successCallback(pagedUsers);\r\n                        },\r\n                        function (error) {\r\n                            errorCallback(error);\r\n                        }\r\n                    );\r\n                },\r\n\r\n                readUser: function (params, successCallback, errorCallback) {\r\n                    params.resource = 'users';\r\n                    params.item = params.item || {};\r\n                    params.item.party_id = pipRest.partyId($stateParams);\r\n                    params.item.id = params.item.id || $stateParams.id;\r\n                    return pipDataModel.readOne(params, successCallback, errorCallback);\r\n                },\r\n                \r\n                updateUser: function (item, transaction, successCallback, errorCallback) {\r\n                    pipRest.users().update(\r\n                        item.item,\r\n                        function (updatedItem) {\r\n                            if (successCallback) successCallback(updatedItem);\r\n                        },\r\n                        function (error) {\r\n                            errorCallback(error);\r\n                        }\r\n                    );\r\n                }\r\n\r\n            }\r\n        }];\r\n    });\r\n\r\n})();"],"sourceRoot":"/source/"}